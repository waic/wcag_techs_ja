<?xml version="1.0" encoding="utf-8"?>
<technique id="FLASH17">
  <short-name>Flash オブジェクトをキーボードで操作可能にして、キーボードトラップを回避する</short-name>
  <applicability>
    <ul>
<li><p>Adobe Flash Professional バージョン MX 以降</p></li>
<li><p>Adobe Flex</p></li>
</ul>
  </applicability>
  <applies-to>
    <success-criterion idref="keyboard-operation-keyboard-operable"/>
    <success-criterion idref="keyboard-operation-trapping"/>
  </applies-to>
  <ua-issues>
    <ua-issue>
      <p>ユーザーエージェントによるサポートに関する全般的な情報は、<a href="flash.html#flash_ua_support">Flashのユーザーエージェントによるサポート</a>を参照のこと。</p>
    </ua-issue>
    <ua-issue>
      <p>この実装方法が対象としている問題は、Internet Explorer 以外のブラウザのみで発生する。ただし、現時点では、この実装方法で対処できるのは、Firefox（WindowsとMac OSX）、Google ChromeとSafari 5（いずれもMac OSXのみ）である。ChromeとSafariのWindows版は、今のところプラグインの中へフォーカスを移動させたり、プラグインから外へフォーカスを移動させたりすることができない。また、この実装方法が動作するためには JavaScript を有効にする必要がある。</p>
    </ua-issue>
  </ua-issues>
  <description><p>この実装方法の目的は、キーボード・フォーカスがウェブページに埋め込まれた Flash コンテンツに入ったり、Flash コンテンツから出たりできるようにすることである。Internet Explorer 以外のブラウザでは、埋め込まれた Flash コンテンツのキーボード・アクセシビリティに関連した問題がある。その問題とは、Flash コンテンツとその周囲の HTML コンテンツのいずれもキーボードでアクセスが可能な場合、マウスを使用せずに Flash コンテンツと HTML コンテンツの間でキーボードフォーカスを移動させることができない点である。つまり、Flash コンテンツの内部にフォーカスがあると、キーボードのユーザーはフォーカスを移動できない。同様に、HTML コンテンツ（Flash ムービーの外部）のいずれかにフォーカスがあると、Flash コンテンツにフォーカスを移動することができなくなる。</p>
<p>これは長い間存在している問題であり、ブラウザによる埋め込みプラグインの実装方法に関連している。この問題が修正されるまで、回避策を用意するのは Flash 開発者の義務である。この実装方法は、その回避策の一つである。この実装方法の背景にある考え方は以下のとおりである。</p>
<ul>
<li><p>ドキュメント内の各 Flash コンテンツに関して、隣接する二つのフォーカス可能な HTML オブジェクト（コンテンツの前後のオブジェクト）を特定する。これらの要素は、ウェブページ内でタブ順序が適用される任意の HTML 要素である（リンクやフォーム・コントロールなど）。</p></li>
<li><p>Flash コンテンツのオブジェクト自体をドキュメントのタブ順序にも追加する。これにより、コンテンツにタブを移動することが可能になる。</p></li>
<li><p>Flash コンテンツの内部では、Flash Player が独自のタブ順序を管理する。通常、Flash コンテンツの中をタブ移動していて、タブ順序の先頭または最後に到達したとき、フォーカスはラップされて　Flash コンテンツのタブ順序の反対側の先頭または最後に移動する。つまり、フォーカスを Tab キー（または Shift + Tab キー）によって Flash コンテンツから抜け出させることができない。しかし、この実装方法を使用することによって、「フォーカスのラップ」が検出された場合に HTML のタブ順序内の隣接する要素に移動するようになる（キーボードを使用して Flash コンテンツのタブ順序から抜け出すことが可能になる）。</p></li>
</ul>
<p>Flash プロジェクトに SWFFocus クラスをインポートすると、次のようになる。</p>
<ul>
<li>
<p>JavaScript の &lt;script&gt; タグが生成され、Flash コンテンツが格納されている HTML ドキュメントに追加される。この JavaScript コードは以下の処理を行う。</p>
<ul>
<li><p>ページ内の各 Flash コンテンツの &lt;object&gt; 要素に対して、タブインデックス値 "0" を設定する。これにより、Flash オブジェクトがタブ順序に含まれるようになる。</p></li>
<li><p>オプションで、Flash コンテンツの前後に非表示のアンカー要素を作成する。この要素は、SWFFocus によってフォーカスを Flash コンテンツから HTML ページに戻すために使用される。または、開発者自身が、既存のフォーカス可能な HTML 要素を Flash コンテンツの前後のタブストップとして指定することもできる。</p></li>
<li><p>Flash コンテンツのオブジェクトのイベントハンドラを設定する。これによって、Flash コンテンツのオブジェクトがフォーカスを受け取った際に SWFFocus クラスに通知され、Flash コンテンツ内部のタブ順序を管理できるようにする。</p></li>
</ul>
</li>
<li><p>SWFFocus クラスは Flash コンテンツ内のフォーカスの変更を監視する。コンテンツ内でフォーカスのラップが検出されたら JavaScript の関数が呼び出され、これによって隣接する HTML コンテンツにフォーカスが戻される。</p></li>
</ul>
<p>上記で示したように、このテクニックの使用方法は二通りある。</p>
<ol class="enumar">
<li>
<p>HTML のタブ順序内で各 Flash コンテンツに隣接するフォーカス可能な要素を、SWFFocus クラスに生成させる（下記の事例 1 で示す）。</p>
<p>デフォルトでは、SWFFocus クラスは埋め込まれた Flash コンテンツの前後に非表示のリンク要素を作成する。これらの要素は、Flash コンテンツの外部にタブ移動（または shift キーを押しながらタブ移動）する際に、フォーカスを移動するための「アンカー」として必要になる。この手法は、開発者による追加作業が必要ないため実装が最も簡単である。この手法の欠点は、非表示のリンクという意味のない要素が HTML のタブ順序の中に紛れ込むことである（これらの要素は、Flash コンテンツの外部にタブ移動する際のタブストップのみとして使用される。Flash コンテンツの内部にタブ移動する場合には使用されない）。以上の点から、この手法ではなく次の 2. の手法を使用することが推奨される。</p>
</li>
<li>
<p>HTML のタブ順序内における各 Flash コンテンツの前後のフォーカス可能な HTML 要素を明示的に指定する（下記の事例 2 で示す）。</p>
<p>この手法では、開発者は ID 値を使用することによって、HTML のタブ順序内で Flash コンテンツの前後に当たる要素を指定できる。これは、Flash コンテンツの &lt;object&gt; 要素に特別なクラス名を設定することによって実現される。タブ順序内に不必要な要素が入り込むことがないため、この手法を用いることがより好ましい。ただし、開発者自身がこの点を意識して追加作業を行う必要がある（ID 値を手動で設定する必要がある）。また、状況によっては、Flash コンテンツの前後にフォーカス可能な要素が存在しない場合もありうる。</p>
</li>
</ol></description>
  <examples>
    <eg-group>
      <head>自動生成されるリンクを使用する</head>
      <description><p>この事例では、フォーカス可能な HTML 要素を明示的に指定することなく、SWFFocus クラスを使用している。SWFFocus によって、Flash コンテンツの前後に非表示のリンクが動的に挿入される。</p>
<exsubhead>Flash コンテンツをロードする</exsubhead><p>この事例では、Flash オブジェクトは <a href="http://code.google.com/p/swfobject/wiki/documentation#How_to_embed_Flash_Player_content_using_SWFObject_static_publish">SWFObject による動的なパブリッシュ手法（英語）</a>によって追加されている。この手法では、JavaScript （ブラウザによってサポートされる方法）により動的に object タグが生成される。これは推奨される手法ではあるが、この実装方法を使用することは必須ではない。なお、HTML ドキュメント内に object タグがハードコーディングされている場合であっても SWFFocus クラスは動作する。</p>
<p>以下のサンプルコードは、SWFObject を使用して動的にコンテンツをロードする方法を示している。</p>
<exsubhead>事例 1 の HTML および Javascript のサンプルコード</exsubhead></description>
      <code/>
      <description><exsubhead>Flash 内に SWFFocus クラスをインポートし初期化する</exsubhead><p>Flash プロジェクトのソースパスに SWFFocus クラスを追加する必要がある。これを行うための最も簡単な方法は、com/swffocus/SWFFocus.as ファイル（ネストしたディレクトリ構造も含む）をプロジェクトのルートディレクトリにコピーすることである。</p>
<p>コンテンツのソースパスに SWFFocus クラスを追加したら、以下のコードによってこのクラスを初期化する必要がある。</p>
</description>
      <code/>
      <description><p>このクラス自身のコードはソースファイル内にある。</p>
</description>
    </eg-group>
    <eg-group>
      <head>既存のフォーカス可能な HTML の要素を明示的に指定する</head>
      <description><p>この実装方法の大部分は事例 1 と同じである。</p>
<ulist><item><p>SWFObject による動的ロードの手法を使用して Flash コンテンツをロードする。</p></item><item><p>コンテンツのソースパスに SWFFocus クラスを追加し、Flash コンテンツ内で初期化する必要がある。</p></item></ulist><p>これらの手順の詳細については、事例 1 を参照のこと。</p>
<p>しかし、このケースでは、Flash コンテンツのオブジェクトに特別なクラス名が追加される。これらのクラス名は、HTML のタブ順序においてコンテンツの前後に置かれる要素の ID 値を示す。このクラス名は以下のようになる。</p>
<ulist><item><p>'swfPref-&lt;previous ID&gt;'。この '&lt;previous element&gt;' にはタブ順序における前の要素の ID 値が設定される。</p></item><item><p>'swfNext-&lt;next ID&gt;'。この '&lt;next element&gt;' にはタブ順序における次の要素の ID 値が設定される。</p></item></ulist><p>以下に HTML コードの例を示す（object タグに追加されたクラス名に注目）。</p>
</description>
      <code>&lt;a href="http://www.lipsum.com/" id="focus1"&gt;test 1&lt;/a&gt;

&lt;object class="swfPrev-focus1 swfNext-focus2"
  data="keyboard_trap_fix_as3.swf" tabindex="0"
  type="application/x-shockwave-flash"/&gt;
&lt;a href="http://www.lipsum.com/" id="focus2"&gt;test 2&lt;/a&gt;</code>
      <description><p>この事例では SWFObject の動的ロードが使用されているため、このクラス名は SWFObject の初期化時に属性として指定される必要がある。次のコード例はこの処理を示したものである。</p>
<exsubhead>事例 2 の HTML および Javascript のサンプルコード</exsubhead></description>
      <code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
　  &lt;title&gt;Keyboard Trap Fix Example &lt;/title&gt;
  　&lt;meta content="text/html; charset=utf-8" http-equiv="Content-Type"/&gt;
  　&lt;script src="swfobject_2_1.js" type="text/javascript"/&gt;
 　 &lt;script type="text/javascript"&gt;
      var flashvars = {};
      var params = {};
      params.scale = "noscale";
      var attributes = {};
      attributes.id = "FlashSample2SWF";
      attributes.name = "FlashSample2SWF";
      attributes["class"] = "swfPrev-focus1 swfNext-focus2";
      swfobject.embedSWF("keyboard_trap_fix_as3.swf", "flashSample1", "150", 
      "200", "9.0.0", "expressInstall.swf", flashvars, params, attributes);
   &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;a href="http://www.lipsum.com/" id="focus1"&gt;lorem&lt;/a&gt;
   &lt;p&gt;The following Flash content uses existing links in the document
   to move focus to when (shift) tabbing out of the Flash content.
   The existing links are defined by placing special classnames on
   the Flash object.&lt;/p&gt;
&lt;div id="flashSample2"&gt;
   &lt;a href="http://www.adobe.com/go/getflashplayer"&gt;
   &lt;img alt="Get Adobe Flash player"
   src="http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif"/&gt;
   &lt;/a&gt;
&lt;/div&gt;
   &lt;a href="http://www.lipsum.com/"&gt;lorem&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;</code>
      <description><p>注記： この事例では、Flash コンテンツの挿入で SWFObject が呼び出される時点で、フォーカス可能な HTML 要素が既に存在し、ID 値が設定されているものと想定している。ただし、Flash コンテンツが作成される時点ではまだこれらの要素が存在しないこともありうる。また、後になってこれらの要素が動的に削除されることもありうる。こうした状況であっても、前後のフォーカス可能な要素に ID 値の再割り当てを行うことで対応できる。これを行うには、Flash コンテンツのオブジェクト上で SWFsetFocusIds() メソッドを呼び出す。以下にその例を示す。</p>
</description>
      <code>var o = document.getElementById("FlashSample1SWF");
o.SWFsetFocusIds('prevId', 'nextId');</code>
      <description><p>以降は、Flash コンテンツの外部にタブ移動する際にフォーカスを移動するために、更新された ID が使用される。</p>
</description>
    </eg-group>
  </examples>
  <resources>
    <see-also>
      <ulist>
        <item>
          <p><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="working-examples/FLASH17/keyboard_trap_fix_custom_as3.zip" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Example source containing the SWFFocus class</loc></p>
        </item>
        <item>
          <p><loc xmlns:xlink="http://www.w3.org/1999/xlink" href="http://www.iheni.com/flash-and-keyboard-access-across-browsers/" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">Flash and keyboard access across browsers by Henny Swan</loc>by Henny Swan</p>
        </item>
      </ulist>
    </see-also>
  </resources>
  <related-techniques/>
  <tests>
    <procedure>
      <p>ウェブページ上の Flash コンテンツについて：</p>
      <olist>
        <item>
          <p>可能であれば、Flash コンテンツのソースが SWFFocus クラスをインポートし、初期化している。</p>
        </item>
        <item>
          <p>Tab キーを押してページ上のタブ移動可能なアイテム間を移動する。</p>
        </item>
        <item>
          <p>Flash コンテンツの内部にタブ移動できる。</p>
        </item>
        <item>
          <p>さらに Tab キーを押し、Flash コンテンツの外部にタブ移動できる。</p>
        </item>
      </olist>
    </procedure>
    <expected-results>
      <ulist>
        <item>
          <p>3. および 4. を満たしている。</p>
        </item>
      </ulist>
      <p>注意： この実装方法が「達成基準を満たすことのできる実装方法」の一つである場合、このチェックポイントや判定基準を満たしていなければ、それはこの実装方法が正しく用いられていないことを意味するが、必ずしも達成基準を満たしていないことにはならない。場合によっては、別の実装方法によってその達成基準が満たされていることもありうる。</p>
    </expected-results>
  </tests>
  <translationcredit>
    <ulist>
      <item>原文：<a href="http://www.w3.org/TR/WCAG20-TECHS/FLASH17.html">FLASH17: Providing keyboard access to a Flash object and avoiding a keyboard trap（英語）</a></item>
      <item>日本語訳監修：<a href="http://www.infoaxia.co.jp/">植木 真（株式会社インフォアクシア）</a></item>
      <item>日本語訳：<a href="http://www.adobe.com/jp/accessibility/">アドビ システムズ 株式会社</a></item>
    </ulist>
  </translationcredit>
</technique>
