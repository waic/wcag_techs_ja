#!/usr/bin/env ruby
# -*- coding: utf-8; -*-
#
# WCAG2.0 Technicsの日本語訳HTMLを元のXMLフォーマットへ変換する
#
require 'nokogiri'

if ARGV.size != 2
	$stderr.puts "usage: #{File.basename $0} <html> <dest>\n\thtml: HTML file name\n\tdest: destination path"
	exit 1
end

src = ARGV.shift
dst = ARGV.shift
tech_id = File.basename( src, '.html' )
html = Nokogiri( open( src, 'r:utf-8', &:read ) )

xml = Nokogiri::XML::Builder.new do |x|
	x.technique( id: tech_id ) {
		x.__send__( :"short-name" ) {
			x.text html.css( 'h1' )[0].text.strip.sub( /\A.*? /, '' )
		}
		x.applicability {
			x << html.css( 'div.applicability div.textbody' ).inner_html.strip
		}
		x.__send__( :'applies-to' ) {
			[].tap{|ids|
				html.css( 'p.referenced + ul > li a' ).each do |a|
					next if a.attr( 'href' ) !~ /#/
					ids << a.attr( 'href' ).sub( /\A.*#/, '' )
				end
			}.uniq.each do |id|
				x.__send__( :'success-criterion', idref: id )
			end
		}
		x.__send__( :'ua-issues' ) {
			x.__send__( :'ua-issue' ) {
				### CODE HERE ###
			}
		}
		x.description {
			x << html.css( "##{tech_id}-description + div.textbody" ).inner_html.strip
		}
		x.examples {
			html.css( 'div.example' ).each_with_index do |example, idx|
				head = html.css( "##{tech_id}-ex#{idx+1}", "##{tech_id}-failex#{idx+1}" ).text.strip.sub( /(不適合)?事例\s\d：?/, '' )
				role = $1 ? { role: 'failure' } : {}
				x.head { x.text head } unless head.empty?
				x.__send__( :'eg-group', role ) {
					example.css( 'div' ).each{|div|
						case div.attr( 'class' )
						when 'textbody'
							x.description {
								x << div.inner_html.strip
							}
						when 'code'
							x.code {
								x << div.css( 'code' ).inner_html.strip
							}
						else
							raise "Unknown class name #{div.attr 'class'}."
						end
					}
				}
			end
		}
		x.resources {
			x.__send__( :'see-also' ) {
				x.ulist {
					html.css( "##{tech_id}-resources + div.textbody li" ).each{|li|
						x.item {
							x.p {
								x.loc(
									'xmlns:xlink' => 'http://www.w3.org/1999/xlink',
									'href' => li.css( 'a' ).attr( 'href' ),
									'xlink:type' => 'simple',
									'xlink:show' => 'replace',
									'xlink:actuate' => 'onRequest' ) { x.text li.text.strip }
							}
						}
					}
				}
			}
		}
		x.__send__( :'related-techniques' ) {
			html.css( "##{tech_id}-related-techs + div.textbody li a" ).each{|a|
				x.relatedtech( idref: a.attr( 'href' ).sub( /\.html$/, '' ))
			}
		}
		x.tests {
			procedure = []
			result = []
			tmp = procedure
			html.css( "##{tech_id}-tests + div.textbody > *" ).each{|e|
				if e.node_name == 'h3'
					tmp = result if e.attr( 'id' ) == "#{tech_id}-results"
					next
				end
				tmp << e
			}
			x.procedure {
				procedure.each{|e|
					case e.node_name
					when 'ol'
						x.olist {
							e.css( 'li' ).each{|li|
								x.item { x << li.inner_html.strip }
							}
						}
					else
						x << e.to_html.strip
					end
				}
			}
			x.__send__( :'expected-results' ) {
				result.each{|e|
					case e.node_name
					when 'ul'
						x.ulist {
							e.css( 'li' ).each{|li|
								x.item { x << li.inner_html.strip }
							}
						}
					else
						x << e.to_html.strip
					end
				}
			}
		}
		x.translationcredit {
			x.ulist {
				html.css( 'div.annotation li' ).each{|li|
					x.item { x << li.inner_html.strip  }
				}
			}
		}
	}
end

puts Nokogiri::XML( xml.to_xml, nil, 'utf-8' )
