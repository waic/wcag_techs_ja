#!/usr/bin/env ruby
# -*- coding: utf-8; -*-
#
# WCAG2.0 Technicsの日本語訳HTMLを元のXMLフォーマットへ変換する
#
require 'nokogiri'

def replace_element( elem )
	case elem.name
	when 'div'
		case elem.attr( 'class' )
		when 'note'
			'note'
		when 'textbody'
			'textbody'
		when nil
			'div'
		else
			$stderr.puts "Unknown replace rule for #{elem.name}.#{elem.attr 'class'}"
		end
	when 'span'
		'phrase'
	else
		elem.name
	end
end

def get_diff_class( elem )
	return {} unless elem
	return {} if elem.name !~ /^(div|span)$/

	return {}.tap{|h|
		h['diff'] = case elem.attr( 'class' )
		when 'diff-delete'
			'del'
		when 'diff-change'
			'chg'
		when 'diff-add'
			'add'
		else
			raise "+++ unknown diff class: #{elem.name}.#{elem.attr( 'class' )} +++"
		end
	}
end

def paragraph( x, p )
	p.children.each do |e|
		e = e.children[0] if e.name == 'span'
		case e.name
		when 'text'
			x << e.to_html.strip
		when 'loc'
			x.loc( e.attributes.update( get_diff_class( e.parent ) ) ){|loc|
				x.text e.text.strip
			}
		else
			x << e.to_html.strip
		end
	end
end

def make_see_also( x, see_also )
	x.__send__( :'see-also' ) {
		see_also.each{|e|
			case e.name
			when 'h3'
				x.head {
					x.text e.text.strip
				}
			when 'ul'
				x.ulist {
					e.css( 'li' ).each{|li|
						diff_class = get_diff_class( li.css( 'div' )[0] )
						x.item( diff_class ) {
							x.p( li.css( 'p' ).first.attributes.empty? ? diff_class : li.css( 'p' ).first.attributes ) {
								paragraph( x, li.css( 'p' ) )
							}
						}
					}
				}
			when 'p'
				x.p {
					paragraph( x, e )
				}
			end
		}
	}
end

if ARGV.size != 2
	$stderr.puts "usage: #{File.basename $0} <html> <dest>\n\thtml: HTML file name\n\tdest: destination path"
	exit 1
end

src = ARGV.shift
dst = "#{ARGV.shift}/#{File.basename src, '.html'}.xml"

tech_id = File.basename( src, '.html' )
html = Nokogiri( open( src, 'r:utf-8', &:read ) )

if html.css( 'h1' ).size == 0
	$stderr.puts "#{tech_id}: No h1 element in the html. Maybe invalid source."
	open( dst, 'w:utf-8' ) {|o|} # put dummy file
	exit
end

html.css( '.difftext' ).remove
html.css( '.diff-change > span', '.diff-change > p' ).each{|e|
	e.parent.replace( %Q|<#{replace_element e} diff="chg">#{e.inner_html}</#{replace_element e}>| )
}
html.css( '.diff-add > span', '.diff-add > p', '.diff-add > div.note' ).each{|e|
	e.parent.replace( %Q|<#{replace_element e} diff="add">#{e.inner_html}</#{replace_element e}>| )
}
html.css( '.diff-delete > span', '.diff-delete > p' ).each{|e|
	e.parent.replace( %Q|<#{replace_element e} diff="del">#{e.inner_html}</#{replace_element e}>| )
}
html.css( 'div.note' ).each{|div| div.replace( %Q|<note>#{div.inner_html}</note>| ) }
html.css( 'em' ).each{|em|
	if /\A注.*[:：]\s*\Z/ =~ em.text
		em.replace '' # delete <note>'s heading
	else
		# CODE ME: <em>の特殊な使われ方への対応
	end
}
html.css( 'a' ).each{|a|
	a.replace( %Q|<loc xmlns:xlink="http://www.w3.org/1999/xlink" href="#{a.attr( 'href' )}" xlink:type="simple" xlink:show="replace" xlink:actuate="onRequest">#{a.inner_html.strip}</loc>| )
}

### CODE ME: <ul><ol>の一括置換も?

xml = Nokogiri::XML::Builder.new do |x|
	x.technique( id: tech_id ) {
		x.__send__( :"short-name" ) {
			html.css( 'h1 loc' ).remove
			x << html.css( 'h1' ).inner_html
		}
		x.applicability {
			x << html.css( 'div.applicability div.textbody' ).inner_html.strip
		}
		x.__send__( :'applies-to' ) {
			[].tap{|ids|
				html.css( 'p.referenced + ul > li loc' ).each do |a|
					next if a.attr( 'href' ) !~ /#/
					ids << a.attr( 'href' ).sub( /\A.*#/, '' )
				end
			}.uniq.each do |id|
				x.__send__( :'success-criterion', idref: id )
			end
		}
		x.__send__( :'ua-issues' ) {
			html.css( 'div.ua-issue' ).each do |div|
				x.__send__( :'ua-issue' ) { ### CODE HERE: add name and version attribute from original XML ###
					x << div.inner_html.strip
				}
			end
		}
		x.description {
			html.css( "##{tech_id}-description + div.textbody" ).children.each{|e|
				case e.name
				when 'p'
					x.p { paragraph( x, e ) }
				else
					x << e.to_html.strip
				end
			}
		}
		x.examples {
			html.css( 'div.example' ).each_with_index do |example, idx|
				head = html.css( "##{tech_id}-ex#{idx+1}", "##{tech_id}-failex#{idx+1}" ).text.strip.sub( /(不適合)?事例\s\d[：:]?/, '' ).strip
				role = $1 ? { role: 'failure' } : {}
				role.update( get_diff_class( example.parent.parent ) )
				x.__send__( :'eg-group', role ) {
					x.head { x.text head } unless head.empty?
					example.children.each{|div|
						diff = {}
						if /^diff-/ =~ div.attr( 'class' )
							diff = get_diff_class( div )
							div = div.css( 'div' )[0]
						end
						case div.attr( 'class' )
						when 'textbody'
							x.description( diff ) {
								div.children.each do |e|
									case e.node_name
									when 'div'
										case e.attr( 'class' )
										when 'note'
											x.note {
												x << e.inner_html.strip
											}
										when nil
											### CODE ME: a div have empty class name in PDF1 ###
										else
											$stderr.puts "#{tech_id}: Unknown div class name '#{e.attr "class"}' in eg-group.description."
											exit 1
										end
									when 'p'
										x << e.to_html.strip + "\n"
									when 'note'
										x << e.to_html.strip + "\n"
									when 'ul'
										x.ulist {
											e.css( 'li' ).each do |li|
												x.item{ x << li.inner_html.strip }
											end
										}
									when 'ol'
										x.olist {
											e.css( 'li' ).each do |li|
												x.item{ x << li.inner_html.strip }
											end
										}
									when 'img'
										x.graphic(
											'xmlns:xlink' => "http://www.w3.org/1999/xlink",
											'source' => e.attr( 'src' ),
											'alt' => e.attr( 'alt' ),
											'xlink:type' => "simple",
											'xlink:show' => "embed",
											'xlink:actuate' => "onLoad" ){}
									when 'h4'
										x.exsubhead {
											x.text e.text.strip
										}
									when 'table'
										### CODE ME: table element appear in PDF3 ###
									else
										unless e.node_name == 'text'
											$stderr.puts "#{tech_id}: Unknown node '#{e.node_name}' in eg-group.description."
											exit 1
										end
									end
								end
							}
						when 'code'
							x.code {
								x << div.css( 'code' ).inner_html.strip
							}
						else
							unless div.name == 'text'
								$stderr.puts "#{tech_id}: Unknown class name '#{div.node_name}.#{div.attr 'class'}', skipped."
								exit 1
							end
						end
					}
				}
			end
		}
		x.resources {
			see_also = []
			html.css( "##{tech_id}-resources + div.textbody > *" ).each_with_index{|e, idx|
				next if idx == 0 # skipping first <p> element because it is only a comment.
				if e.name == 'h3' # beginning of next resource
					make_see_also( x, see_also ) unless see_also.empty?
					see_also = []
				end
				see_also << e
			}
			make_see_also( x, see_also ) unless see_also.empty?
		}
		x.__send__( :'related-techniques' ) {
			html.css( "##{tech_id}-related-techs + div.textbody li loc" ).each{|a|
				x.relatedtech( idref: a.attr( 'href' ).sub( /\.html$/, '' ))
			}
		}
		x.tests( (get_diff_class( html.css("##{tech_id}-tests")[0].parent ) rescue {}) ) {
			note = nil
			procedure = []
			result = []
			tmp = procedure

			html.css( "##{tech_id}-tests + note" ).each{|n|
				note = n
				n.remove
			}

			html.css( "##{tech_id}-tests + div.textbody > *" ).each{|e|
				if e.node_name == 'h3'
					tmp = result if e.attr( 'id' ) == "#{tech_id}-results"
					next
				end
				tmp << e
			}
			x.procedure {
				x << note.to_html if note

				procedure.each{|e|
					case e.node_name
					when 'ol'
						x.olist {
							e.css( 'li' ).each{|li|
								x.item { x << li.inner_html.strip }
							}
						}
					else
						x << e.to_html.strip
					end
				}
			}
			x.__send__( :'expected-results' ) {
				result.each{|e|
					case e.node_name
					when 'ul'
						x.ulist {
							e.css( 'li' ).each{|li|
								x.item { x << li.inner_html.strip }
							}
						}
					else
						x << e.to_html.strip
					end
				}
			}
		}
		x.translationcredit {
			x.ulist {
				html.css( 'div.annotation li' ).each{|li|
					x.item { paragraph( x, li ) }
				}
			}
		}
	}
end

open( dst, 'w:utf-8' ) do |o|
	o.puts Nokogiri::XML( xml.to_xml, nil, 'utf-8' )
end
