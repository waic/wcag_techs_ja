<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "xmlspec.dtd">
<spec status="final" w3c-doctype="wgnote">
  <header>
    <title>PDF Techniques</title>
    <w3c-designation>WCAG20-PDF-TECHS</w3c-designation>
    <w3c-doctype>W3C Working Group Note</w3c-doctype>
    <pubdate>
      <day>3</day>
      <month>January</month>
      <year>2012</year>
    </pubdate>
    <publoc>
      <loc href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-PDF-TECHS-20060331/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-PDF-TECHS-20060331/</loc>
    </publoc>
    <latestloc>
      <loc href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-PDF-TECHS/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-PDF-TECHS/</loc>
    </latestloc>
    <prevlocs>
      <loc href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-PDF-TECHS-20100107/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-PDF-TECHS-20100107/</loc>
    </prevlocs>
    <authlist>
    	<author>
    		<name>Mary Utt</name>
    		<affiliation>The Paciello Group</affiliation>
    	</author>
    	<author>
        <name>Michael Cooper</name>
    		<affiliation>W3C</affiliation>
      </author>
    </authlist>
    <status>
      <p>
        <emph>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the <loc href="http://www.w3.org/TR/">W3C technical reports index</loc> at http://www.w3.org/TR/.</emph>
      </p>
      <p>Please send comments about this document to <loc href="mailto:public-comments-wcag20@w3.org">public-comments-wcag20@w3.org</loc>. The <loc href="http://lists.w3.org/Archives/Public/public-comments-wcag20/">archives for the public comments list</loc> are publicly available.   <loc href="http://lists.w3.org/Archives/Public/w3c-wai-gl">Archives of the WCAG WG mailing list</loc> are also publicly available.</p>
      <p>Publication as a Working Draft does not imply endorsement by the W3C Membership. This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.  The WCAG WG intends to publish this as a Working Group Note at the time that WCAG 2.0 becomes a Recommendation.</p>
      <!-- do not need patent section since these are not on the Rec track -->
      <p>This document has been produced as part of the W3C <loc href="http://www.w3.org/WAI/">Web Accessibility Initiative</loc> (WAI). The goals of the WCAG WG are discussed in the <loc href="http://www.w3.org/WAI/GL/new-charter-2000.html">Working Group charter</loc>. The WCAG WG is part of the <loc href="http://www.w3.org/WAI/Technical/Activity">WAI Technical Activity</loc>.</p>
    </status>
    <abstract>
      <p>This document provides information to Web content developers who wish to satisfy the Success Criteria of "Web Content Accessibility Guidelines 2.0" <bibref ref="WCAG20"/> (currently a W3C Working Draft).   The techniques in this document are specific to PDF content <bibref ref="PDF"/>.  Use of the illustrative techniques provided in this document may make it more likely for Web content to demonstrate conformance to WCAG 2.0 Success Criteria (by passing the relevant tests in the WCAG 2.0 test suite - <emph>to be developed</emph>) than if these illustrative techniques are not used.</p>
      <p>There may be other techniques besides those provided in this document that may be used to demonstrate conformance to WCAG 2.0; in that case, it is encouraged to submit those techniques to the WCAG WG for consideration for inclusion in this document, so that the set of techniques  maintained by the WCAG WG is as comprehensive as possible. Deprecated examples illustrate techniques that the Working Group no longer recommends, but may be applicable in some cases. </p>
      <p>This document is part of a series of documents published by the W3C
Web Accessibility Initiative (WAI) to support WCAG 2.0.</p>
    </abstract>
    <langusage>
      <language id="en-US"/>
    </langusage>
    <revisiondesc>
      <p/>
    </revisiondesc>
  </header>
  <body>
  	<!-- techniques -->
    <div1 id="pdf">
      <head>PDF Techniques</head>
    	<div2 id="pdf_notes">
  		<head>PDF Technology Notes</head>
    		<div3 id="pdf_notes_intro">
  			<head>Introduction</head>
<p>The Portable Document Format (PDF) is a file format for representing documents in a manner independent of the application software, hardware, and operating system used to create them, as well as of the output device on which they are to be displayed or printed. PDF files specify the appearance of pages in a document in a reliable, device-independent manner. The PDF specification was introduced by Adobe Systems in 1993 as a publicly available standard. In January 2008, PDF 1.7 became an ISO standard (ISO 32000-1). </p>
<p>Of note for accessibility is PDF/UA (Universal Accessibility) which became an ISO Draft International Standard (DIS) in November 2010 (ISO/DIS 14289-1(See <loc href="http://pdf.editme.com/pdfua">PDF/UA
  					Wiki (ISO DIS 14289 - 1)</loc>.) The scope of PDF/UA is not meant to be a techniques (how-to) specification, but rather a set of guidelines for creating more accessible PDF. The specification describes the required and prohibited components and the conditions governing their inclusion in or exclusion from a PDF file in order for the file to be available to the widest possible audience, including those with disabilities. The mechanisms for including the components in the PDF stream are left to the discretion of the individual developer, PDF generator, or PDF viewing agent. PDF/UA also specifies the rules governing the behavior for a conforming reader. </p></div3>
    		<div3 id="pdf_notes_acc-sup">
  		<head>PDF Accessibility Support</head>
  			<p>PDF includes several features in support of accessibility of documents
  				to users with disabilities. The core of this support lies in the ability
  				to determine the logical order of content in a PDF document, independently
  				of the content's appearance or layout, through logical structure and
  				Tagged PDF. Applications can extract the content of
  				a document for presentation to users with disabilities by traversing
  				the structure hierarchy and presenting the contents of each node. For
  				this reason, producers of PDF files must ensure that all information
  				in a document is reachable by means of the structure hierarchy. </p>
    			<div4 id="pdf_notes_acc-sup_structure">
  			<head>Logical Structure</head>
  			<p>PDF's logical structure features (introduced in PDF 1.3) provide a
  				mechanism for incorporating structural information about a document's
  				content into a PDF file. Such information might include, for example,
  				the organization of the document into chapters, headings, paragraphs
  				and sections or the identification of special elements such as figures,
  				tables, and footnotes. The logical structure features are extensible,
  				allowing applications that produce PDF files to choose what structural
  				information to include and how to represent it, while enabling PDF
  				consumers to navigate a file without knowing the producer's structural
  				conventions. </p>
  			<p>PDF logical structure shares basic features with standard document
  				markup languages such as HTML, SGML, and XML. A document's logical
  				structure is expressed as a hierarchy of structure elements, each represented
  				by a dictionary object. Like their counterparts in other markup languages,
  				PDF structure elements can have content and attributes. In PDF, rendered
  				document content takes over the role occupied by text in HTML, SGML,
  				and XML. </p>
  			<p>A PDF document's logical structure is stored separately from its visible
  				content, with pointers from each to the other. This separation allows
  				the ordering and nesting of logical elements to be entirely independent
  				of the order and location of graphics objects on the document's pages. </p>
  			<p>The logical structure of a document is described by a hierarchy of
  				objects called the structure hierarchy or structure tree. At the root
  				of the hierarchy is a dictionary object called the structure tree root,
  				located by means of the StructTreeRoot entry in the document catalog.
    					See Section 14.7.2, ("Structure Hierarchy") in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
  					1.7 (ISO 32000-1)</loc>: Table 322 shows the entries in the structure
  				tree root dictionary. The K entry specifies the immediate children
  				of the structure tree root, which are structure elements. </p>
    			</div4>
    			<div4 id="pdf_notes_acc-sup_tagged">
  		<head>Tagged PDF</head>
  		<p>Tagged PDF (PDF 1.4) is a stylized use of PDF that builds on PDF's
  			logical structure framework. It defines a set of standard structure
  			types and attributes that allow page content (text, graphics, and images)
  			to be extracted and reused for other purposes. It is intended for use
  			by tools that perform the following types of operations: </p>
  		<ulist><item><p>Simple extraction of text and graphics for pasting into other applications. </p></item><item><p>Automatic reflow of text and associated graphics to fit a page
  			of a different size than was assumed for the original layout. </p></item><item><p>Processing text for such purposes as searching, indexing, and spell-checking. </p></item><item><p>Conversion to other common file formats (such as HTML, XML, and
  			RTF) with document structure and basic styling information preserved. </p></item><item><p>Making content accessible to people who rely on assistive technology. </p></item></ulist>
    			</div4> 			
  				</div3>
    		<div3 id="pdf_notes_acc-sup_files">
  		<head>PDF File Production and Accessibility</head>
<p>PDF files may be produced either directly by application programs or indirectly by conversion from other file formats or imaging models. In addition, tools exist for inspecting, checking, and repairing PDF files for accessibility. The following sections provide representative lists of applications and tools typically used for these functions. </p>
<p>These notes do not, and cannot, provide an exhaustive list, nor do they endorse particular applications and tools. Rather they provide a snapshot of tools in fairly wide use at the time the WCAG Working Group undertook to review and publish techniques for producing PDF documents. As with any software, application support for PDF accessibility will vary with different versions, with the formatting requirements of specific PDF documents, and with actual usage of the application. That is, the tools can be used properly to produce appropriate tags, etc.. </p>
<p>In general, newer tools will provide greater support than earlier ones. The tools' vendors are the source of authoritative information about their support for PDF accessibility. </p>
    			<div4 id="pdf_notes_acc-sup_files_generating">
  		<head>Generating PDF Files</head>
  		<p>Many applications can generate PDF files directly, and some can import
  			them as well. This direct approach is preferable, since it gives the
  			application access to the full capabilities of PDF, including the imaging
  			model and the interactive and document interchange features. Alternatively,
  			applications that do not generate PDF directly can produce PDF output
  			indirectly. There are two principal indirect methods: </p>
  		<ulist><item><p>The application describes its printable output by making calls
  			to an application programming interface (API) such as GDI in Microsoft®
  			Windows® or QuickDraw in the Apple Mac OS. A software component called
  			a printer driver intercepts these calls and interprets them to generate
  			output in PDF form. </p></item><item><p>The application produces printable output directly in some other
  				file format, such as PostScript, PCL, HPGL, or DVI, which is converted
  				to PDF by a separate translation program. </p></item></ulist>
  		<p>Although these indirect strategies are often the easiest way to obtain
  			PDF output from an existing application, the resulting PDF files may
  			not make the best use of the high-level PDF imaging model <phrase diff="add">relied upon to expose the semantics of the document</phrase>. This is
  			because the information embodied in the application's API calls or
  			in the intermediate output file often describes the desired results
  			at too low a level. Any higher-level information maintained by the
  			original application has been lost and is not available to the printer
  			driver or translator. </p>
    				<p diff="add">For example, since the printer driver or translator targets correct visual output, information about the semantics of the document may not be sent at all or may be ignored when creating the PDF output. As a result, headings may not be tagged as such, or link text may not be associated with its link object. Check with the vendor of any PDF authoring tool to be understand how to use the tool in a way that produces the best tagged output.</p>
    			</div4>
    			<div4 id="pdf_notes_acc-sup_files_applications">
  			<head>PDF Authoring Tools that Provide Accessibility Support</head>
    				<ulist><item><p>Adobe Acrobat's PDFMaker - PDFMaker is part of Adobe Acrobat
    					which adds macros to many business applications such as Microsoft
    					Office, AutoCAD and Lotus Notes that support the conversion of content
    					from the original format to tagged PDF. </p></item>
    					<item><p>Adobe FrameMaker - Desktop publishing application from Adobe Systems
  			that directly exports tagged PDF and provides support for alternative
  			text descriptions. </p></item>
    					<item><p>Adobe InDesign - Page layout and desktop publishing application
  				from Adobe Systems that directly exports tagged PDF and provides
  				support for alternative text descriptions. </p></item>
    					<item><p>Adobe LiveCycle Designer - Windows-based forms design application
  					from Adobe Systems that directly exports tagged PDF interactive forms
  					and provides support for alternative text descriptions; can be invoked
  					standalone or from within Acrobat Pro. </p></item>
    					<item><p>LibreOffice - Open-source word processing software from The Document Foundation that can export tagged PDF. </p></item>
					<item><p> Lotus Symphony Documents - Word-processing software from IBM that can export tagged PDF.</p></item>
					<item><p> Microsoft® Word - Word processing application from Microsoft Corporation
					that can export tagged PDF using the save as XPS or PDF utility. </p></item>
    					<item><p>OpenOffice.org Writer - Open source word-processing software from
  							Sun Microsystems Inc. that can export tagged PDF using the Export
  							as PDF utility. </p></item>
    					<item><p>PAW - PDF Accessibility Wizard for Microsoft Office from Netcentric
  								Technologies is an add-in to Microsoft® Word that makes it possible
  								to create tagged PDF documents. PAW provides tools to allow content
  								authors to run accessibility tests in the Microsoft Word environment
  								and to remediate accessibility issues. </p></item>
    					<item><p>Xenos Axess™ for Accessible Statements - PDF software integrates with an organization's existing enterprise content management (ECM) infrastructure to capture high-volume print streams and automatically transform them into tagged PDFs. </p></item>
    					<item><p>WordPerfect® Office - Word-processing software from Corel that can be used to create, mark up, and share tagged PDF documents.</p></item>
    					<item><p diff="add">Microsoft Office 10 - a suite of desktop office applications  that creates tagged PDF.</p></item>
    				</ulist>
    				<note diff="add"><p>Care should be taken when choosing PDF creation tools from the many available, as some may not support creation of tagged PDF files. </p></note>
    			</div4>
    			<div4 id="pdf_notes_acc-sup_files_checking">
  			<head>Accessibility Checking and Repair</head>
  		<p><loc href="http://www.adobe.com/products/acrobat.html">Adobe
  			Acrobat Pro</loc>. Adobe Acrobat Pro is an application that creates and edits PDF files.
  			It has a number of tools for evaluating and repairing the accessibility
  			of PDF files, including access to the structure root through the
  			tags panel, the ability to directly manipulate the reading order
  			through the order panel, a built-in accessibility checker, and the
  			Touch Up Reading Order tool which provides a graphical mechanism for
  			assessing and repairing the accessibility of a PDF document. </p>
  		<p><loc href="http://www.net-centric.com/products/cl_s508_adobe.aspx">Commonlook™
  			Section 508 for Adobe Acrobat</loc>. Commonlook Section 508 for Adobe
  			Acrobat is a plug-in for Adobe Acrobat Pro from Netcentric Technologies.
  			CommonLook helps correct the most common accessibility problems,
  			including the proper tagging of images, tables, forms and other non-textual
  			objects. A compliance report makes it possible, for PDF authors,
  			to get detailed information on the accessibility problems so they
  			can be corrected. </p>
    				<p><loc href="http://www.access-for-all.ch/en/pdf-lab/pdf-accessibility-checker-pac.html" diff="chg">PAC
  			- the PDF Accessibility Checker</loc>. PAC is a free tool developed
  			and distributed by the «Access for all» Foundation to evaluate the
  			accessibility of PDF documents and PDF forms. PAC offers the added
  			possibility of displaying a preview of the structured PDF document
  			in a web browser. The PAC preview shows which tags are included in
  			the PDF document and presents the accessible elements in the same
  			way as they would be interpreted by assistive technologies (such
  			as screen readers). PAC also provides an accessibility report which
  			lists the detected accessibility errors. Clicking the links in the
  			report displays the most probable source of the error within the
  			document. </p>
    				<div5 id="pdf_notes_acc-sup_files_checking_api">
  				<head>API Inspection Tools</head>
  		<ulist>
<item><p><loc href="http://www.eclipse.org/actf/downloads/tools/aDesigner/">aDesigner</loc> - a disability simulator from the Eclipse Foundation that helps designers ensure that content is accessible and usable by visually impaired users.</p></item>
<item><p><loc href="http://msdn.microsoft.com/en-us/library/ms696079%28VS.85%29.aspx">inspect32</loc> - part of the Microsoft Windows Software Development Kit (SDK) that allows developers and testers to examine the accessible properties of UI components. </p></item>
<item><p> <loc href="http://download.macromedia.com/pub/developer/acrobat/acrobat_accessibility_9.1.zip">PDDOMView</loc> - part
  			of Acrobat_Accessibility_9.1.zip which contains files that can be
  			used by Windows clients of the accessibility interfaces described
  			in the Accessibility API Reference document. </p></item>
<item><p> <loc href="http://msdn.microsoft.com/en-us/library/ms727247.aspx">UISpy</loc> - part of the Microsoft Windows Software Development Kit (SDK) that allows developers and testers to view and interact with the user interface (UI) elements of an application.</p></item>
</ulist>
    				</div5>
  				</div4>
  			</div3>
    		<div3 id="pdf_notes_ua">
  		<head>User Agents</head>
<p>PDF User Agents with accessibility support include:</p>
<ulist><item>	<p>Adobe Acrobat Pro - PDF Authoring Tool, Editor, and Viewer from Adobe Systems which is compatible with MSAA devices on the Windows platform. Has a number of built in accessibility features including text to speech (Read Out Loud), high contrast display, reflow for large print display, auto scroll, accessibility full check, accessibility quick check, touch up reading order tool, and an accessibility setup assistant. </p></item>
<item><p>Adobe Reader – Freely distributed PDF Viewer from Adobe Systems which is compatible with MSAA devices on the Windows platform. Has a number of built in accessibility features including text to speech (Read Out Loud), high contrast display, reflow for large print display, auto scroll, accessibility quick check, and an accessibility setup assistant. </p></item>
<item><p>Kurzweil 3000™ - a comprehensive reading, writing and learning software solution from Kurzweil Educational Systems® which reads PDF files using text to speech facilities. </p></item></ulist>
    			<div4 id="pdf_notes_acc-sup_at">
    				<head>Adobe Reader and Acrobat Support for Accessibility APIs</head>
    				<p>Adobe provides methods to make the content of a PDF file available
    					to assistive technology such as screen readers: </p>
    				<ulist><item><p>On the Microsoft® Windows® operating system, Acrobat and Adobe
    					Reader export PDF content as Component Object Model (COM) objects. Accessibility applications
    					such as screen readers can interface with Acrobat or Adobe Reader
    					in two ways:</p>
    					<ulist><item><p>Through the Microsoft Active Accessibility (MSAA) interface,
    						using MSAA objects that Acrobat or Adobe Reader exports </p></item><item><p>Directly through exported COM objects that allow access to
    							the PDF document's internal structure, called the Document Object
    							Model (DOM). </p></item></ulist>
    				</item><item><p>On UNIX® platforms, Adobe Reader supports the Gnome accessibility
    					architecture. C-based Accessibility Toolkit (ATK) interfaces are
    					available. </p></item></ulist>
    				<p>The DOM and MSAA models are related, and developers can use either
    					or both. Acrobat issues notifications to accessibility clients about
    					interesting events occurring in the PDF file window and responds to
    					requests from such clients. Recent versions of Acrobat and Reader have
    					enhanced the support for accessibility interfaces: </p>
    				<ulist><item><p>MSAA interfaces are supported in Acrobat/Reader 5.0 and later. </p></item><item><p>In Acrobat/Reader 6.0 and later, information about the underlying
    					PDF structure is made available through direct COM objects that represent
    					the PDF DOM. The DOM accessibility interfaces provide somewhat more
    					extensive access. </p></item><item><p>In Acrobat/Reader 7.0 and later, ATK and expanded DOM support is
    						available. </p></item><item><p>The Linux®, Solaris™, AIX®, and HP-UX versions of Adobe Reader
    							implement C-based ATK interfaces, allowing screen readers, screen
    							magnifiers, and on-screen keyboards to query an Accessibility Technology
    							- Service Providers Interface (AT-SPI) registry for applications
    							that are accessible. </p></item><item><p>The DOM has been expanded to provide enhanced caret, selection,
    								and focus support, as well as the new interfaces IPDDomDocument,
    								ISelectText, and IPDDomNodeExt. </p></item></ulist>
    			</div4>
    			<div4 id="pdf_notes_ua_at">
  			<head>Assistive Technology Support</head>
  		<ulist>
<item><p> JAWS 12 for Windows - screen reader from Freedom Scientific. Support
  				for PDF started with JAWS version 4. </p></item><item><p> MAGic 11 - screen magnifier from Freedom Scientific </p></item><item><p> NVDA 2011.1 - NonVisual Desktop Access, open source screen reader
  					distributed by NV Access. Providing feedback via synthetic speech
  					and Braille, NVDA allows blind and vision-impaired people to access
  					and interact with the Windows operating system and many third party
  					applications. </p></item>
<item><p>Supernova Access Suite 12.02 – full screen reader offering magnification, speech, and Braille support from Dolphin. Support for PDF started with HAL version 5.</p></item>
<item><p> System Access To Go - screen reader from Serotek Corporation </p></item><item><p> VoiceOver - screen reader for Mac OS X v10.6 Snow Leopard </p></item><item><p> Window-Eyes 7.2 - screen reader from GW Micro. Window-Eyes was
  						the first screen reader to provide support for PDF files, in Window-Eyes
  						4.2. </p></item><item><p> ZoomText 9.1 - screen magnifier and screen reader from Ai Squared,
  							with support for Adobe Acrobat and Reader:</p>
  							<ulist><item><p>PDF documents can be read using both AppReader and DocReader
  								(without special settings) </p></item><item><p>PDF documents can be read in all Windows operating systems
  									(without special settings) </p></item><item><p>AppReader and DocReader start instantly in Adobe Reader </p></item><item><p>PDF documents can be read with greater accuracy and without
  										paging delays </p></item><item><p>PDF documents can be read in Internet Explorer (with the Adobe
  											Reader plug-in) </p></item><item><p>Special Adobe Reader settings are no longer needed to obtain
  												optimal reading </p></item></ulist>
  						</item></ulist>
    			</div4>
  			</div3>
    		<div3 id="pdf_notes_references">
  		<head>Related References</head>
  			<ulist>
  				<item><p><loc href="http://help.adobe.com/en_US/acrobat/pro/using/WS58a04a822e3e50102bd615109794195ff-7ce6.w.html">Editing
  					PDF Tags in Adobe Acrobat</loc> </p></item>
  				<item><p><loc href="http://help.adobe.com/en_US/acrobat/pro/using/WS58a04a822e3e50102bd615109794195ff-7cff.w.html">Editing
  					PDF Tags with the Touch Up Reading Order Tool</loc> </p></item>
  				<item><p><loc href="http://www.adobe.com/accessibility/">Adobe
  					Accessibility Resource Center</loc> </p></item>
  				<item><p><loc href="http://www.adobe.com/accessibility/products/acrobat/training.html">Adobe
  					Acrobat Accessibility Training Resources</loc> </p></item>
  				<item><p><loc href="http://www.adobe.com/accessibility/pdfs/accessing-pdf-sr.pdf">Accessing
  					PDF Documents with Assistive Technology </loc> </p></item>
  				<item><p><loc href="http://www.adobe.com/devnet/pdf/pdf_reference.html">PDF
  					Specification Archives</loc> </p></item>
  				<item><p><loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
  					1.7 Reference: ISO approved copy of the ISO 32000-1</loc> </p></item>
  				<item><p><loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/access_v9.pdf">PDF
  					Accessibility API Reference - How AT developers can use Acrobat MSAA
  					and IPDDom interfaces to provide access to PDF content</loc> </p></item>
  				<item><p><loc href="http://pdf.editme.com/pdfua">PDF/UA
  					Wiki (ISO DIS 14289 - 1)</loc> </p></item>
  				<item><p><loc href="http://webaim.org/techniques/acrobat/">WebAIM
  				PDF Accessibility</loc> </p></item>
  				<item><p diff="add"><loc href="http://office.microsoft.com/en-us/excel-help/create-accessible-pdfs-HA102478227.aspx">Create accessible PDFs</loc> using Microsoft Office 10</p></item>
  			</ulist>
    		</div3>
  		</div2>
    	<technique id="PDF1">
    		<short-name>Applying text alternatives to images with the Alt entry in PDF documents</short-name>
    		<applicability>
    			<p>Tagged PDF documents with images</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="text-equiv-all"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue id="pdf.ua-issue.general">
    				<p>See <specref ref="pdf_notes"/> for information on user agent and assistive
    				technology support. </p>
    			</ua-issue>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to provide text alternatives for
    				images via an /Alt entry in the property list for a Tag. This is normally
    				accomplished using a tool for authoring PDF. </p>
    			<p>PDF documents may be enhanced by providing alternative descriptions
    				for images, formulas, and other items that do not translate naturally
    				into text. In fact, such text alternatives are required for accessibility:
    				alternate descriptions are human-readable text that can be vocalized
    				by text-to-speech technology for the benefit of users with vision disabilities. </p>
    			<p>When an image contains words that are important to understanding the
    				content, the text alternative should include those words. This will
    				allow the alternative to accurately represent the image. Note that
    				it does not necessarily describe the visual characteristics of the
    				image itself but must convey the same meaning as the image. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding an /Alt entry to an image using Adobe Acrobat
    				9 Pro's TouchUp Object Tool</head>
    				<description> <p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Choose Tools &gt; Advanced Editing &gt; TouchUp Object Tool </p>
    					<p><image><img source="working-examples/PDF1/textalt1.gif" height="247" width="358"/><alt>The TouchUp Object Tool in the Advanced Editing menu.</alt></image> </p></item>
    					<item><p>Access the context menu for the image and choose Properties. </p></item>
    					<item><p>On the TouchUp Properties dialog, select the Tag tab. </p></item>
    					<item><p>On the Tag panel, type the text alternative in the Alternate Text
    						text box. </p>
    					<p><image><img source="working-examples/PDF1/textalt2.gif" height="231" width="556"/><alt>The Tag Tab in the TouchUp Properties dialog.</alt></image> </p></item></olist>
    					<p>This example is shown in operation in the <loc href="alt-entry-to-an-image.pdf" linktype="examples">working example of Adding an /Alt entry to an image</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding an /Alt entry to an image using Adobe Acrobat
    					9 Pro's TouchUp Reading Order Tool</head><description> <p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    				<olist><item><p> Choose Tools &gt; Advanced Editing &gt; TouchUp Reading Order
    					Tool </p>
    					<p><image><img source="working-examples/PDF1/textalt3.gif" height="227" width="358"/><alt>The TouchUp Reading Order Tool in the Advanced Editing menu.</alt></image> </p></item>
    					<item><p>The TouchUp Reading Order dialog will be displayed. </p></item>
    					<item><p>Right-click on the image and choose Edit Alternate Text. </p></item>
    					<item><p>The Alternate Text dialog will be displayed. </p></item>
    					<item><p>Type the text alternative in the Alternate Text text box. </p>
    					<p><image><img source="working-examples/PDF1/textalt4.gif" height="222" width="467"/><alt>The Alternate Text box.</alt></image> </p></item></olist></description>
    			</eg-group>
    			<eg-group>
    				<head>Adding an /Alt entry to an image in PDF documents generated
    				using Microsoft Word</head><description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>    				
    					<section id="PDF1_word_2003">
    					<head> Word 2000-2003 </head>
    					<olist><item><p> Right-click on the image and choose Format Picture </p></item><item><p> Select the Web tab </p></item><item><p> Type the alternative text into the text box provided and then
    						click OK. </p></item></olist>
    					<p><image><img source="working-examples/PDF1/word2003alt.gif" height="291" width="416"/><alt>The Web tab in the Format Picture dialog.</alt></image> </p>
    					</section>
    					<section id="PDF1_word_2007">
    					<head> Word 2007 </head>
    					<olist><item><p> Right-click on the image and choose Size </p></item><item><p> Select the Alt Text tab </p></item><item><p> Type the alternative text into the text box provided and then
    						click OK. </p></item></olist>
    					<p><image><img source="working-examples/PDF1/word2007alt.gif" height="272" width="362"/><alt>The Alt Text tab in the Size dialog.</alt></image> </p>
    					</section>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding an /Alt entry to an image in PDF documents generated
    				using OpenOffice.org Writer 2.2</head>
    				<description>
<p>This example is shown with Open Office.org Writer. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Access the context menu for the image and choose Picture... </p></item><item><p> Select the Options tab </p></item><item><p> Type the alternative text into Alternate (Text Only) text box
    						and click OK. </p></item></olist>
    					<p><image><img source="working-examples/PDF1/ooalt.jpg" height="439" width="556"/><alt>The Options tab in the Picture... dialog.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a text alternative to an image in a PDF document
    				using an /Alt entry</head>
    				<description>
    					<p>The /Alt property used on an image of mountains with a moon and trees
    						typically would be used like this (typically accomplished by an authoring
    						tool): </p>
    					<codeblock><![CDATA[/Figure <</Alt (Sketch of Mountains with moon rising over trees) >>]]></codeblock>
    					<p>The image might also be represented by a tag with a different name.
    						A different name might be used because the tag name is written in
    						a language other than English or because a specific tool uses a different
    						name for some other reason. In this situation, it is also necessary
    						that the RoleMap contained within the StructTreeRoot for the PDF
    						document contain an entry which explicitly maps the name of the tag
    						used for the image with the standard structure type used in PDF documents
    						(in this case, Figure). If the RoleMap contains only an entry mapping
    						Shape tags to Figure tags, the rolemap information would appear as
    						follows: </p>
    					<codeblock><![CDATA[/RoleMap << /Shape /Figure >>]]></codeblock>
    					<p>In this case, the usage of the /Alt entry as follows would also
    					be correct: </p>
    					<codeblock><![CDATA[/Shape <</Alt (Crater Lake in the summer, with the blue sky, clouds and crater walls perfectly reflected in the lake) >>
    					]]></codeblock>
    					<p>Note that the /Alt entry in property lists can be combined with
    						other entries. </p>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist>
    					<item><p> Section 14.9.4 (Replacement Text) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    				1.7 (ISO 32000-1)</loc> </p></item>
    					<item><p diff="chg"><loc href="http://webaim.org/techniques/acrobat/acrobat">Acrobat
    					and Accessibility</loc> </p></item>
    					<item><p><loc href="http://partners.adobe.com/public/developer/en/pdf/PDFReference16.pdf#page=892">PDF
    					Reference 1.6, 10.8.2 Alternate Descriptions</loc> </p></item>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
    				</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G94"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist>
    					<item>
    						<p> Verify the images which need equivalents have /Alt entries on
    					an enclosing tag by one of the following:</p>
	    					<ulist>
	    						<item><p> Read the PDF document with a screen reader, listening to hear
	    						that the equivalent text is read when tabbing to the non-text
	    						object (if it is tabbable) or hearing the alternative text read
	    						when reading the content line-by-line. </p></item>
	    						<item><p> Using a PDF editor, check that a text alternative is displayed for each
	    							image. </p></item>
	    						<item><p> Use a tool which is capable of showing the /Alt entry value,
	    								such as aDesigner, to open the PDF document and view the GUI
	    								summary to read the text alternatives for images. </p></item>
	    						<item><p> Use a tool that exposes the document through the accessibility
	    						API and verify that images have required text equivalents. </p></item>
	    					</ulist>
    					</item>
    				</olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p> Check 1 is true for each image in the document which needs a text
    					equivalent. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Applying_text_alternatives_to_images_with_the_Alt_entry_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF2">
    		<short-name>Creating bookmarks in PDF documents</short-name>
    		<applicability>
    			<p id="pdf.applicability.general">Tagged PDF documents</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="navigation-mechanisms-mult-loc"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The intent of this technique is to make it possible for users to locate
    				content using bookmarks (<emph>outline entries</emph> in an Outline dictionary)
    				in long documents. </p>
    			<p>A person with cognitive disabilities may prefer a hierarchical outline
    				that provides an overview of the document rather than reading and traversing
    				through many pages. This is also a conventional means of navigating
    				a document that benefits all users. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Converting a table of contents created with Microsoft
    					Word 2007 and creating bookmarks for Adobe Reader 9 and Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Microsoft Word and Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Create a table of contents at the beginning of the Word document. </p>
    					<p><image><img source="working-examples/PDF2/word-toc.jpg" height="150" width="363"/><alt>Reference tab on Word ribbon, showing Table of Contents tool.</alt></image> </p></item>
    					<item><p> Use Save as... &gt; Adobe PDF to convert the Word document to
    						PDF, specifying both of the following:</p>
    						<ulist><item><p> Enable Accessibility and Reflow with Tagged Adobe PDF </p></item><item><p> Convert Word Headings into Bookmarks </p></item></ulist>
    					</item></olist>
    					<p>The table-of-contents entries in the converted document will be linked
    						to the headings in the document. </p>
    					<p>In addition, the headings will appear as PDF Bookmarks in the left-hand
    						Navigation pane. </p>
    					<p><image><img source="working-examples/PDF2/bookmarks.jpg" height="249" width="937"/><alt>PDF document showing the Table of Contents and Bookmarks created from the headings in a Word document.</alt></image>  </p>
    					<p>If the document provides a glossary and/or index, these sections
    						should have headings that appear in the table of contents (and thus
    						as bookmarks in the Navigation pane). The table of contents also
    						should be marked up with a heading so it is bookmarked as well. </p>
    					<p>If this markup has not been done in the authoring tool, Adobe Acrobat
    						Pro can be used to provide the tags. See <specref ref="PDF9"/> if
    							you need to modify converted headings or add new ones. </p>
    					<p>This example is shown in operation in the <loc href="bookmarks.docx" linktype="examples">working example of creating bookmarks with Word 2007</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Converting a table of contents created with OpenOffice.org
    					Writer 2.2 and creating bookmarks for Adobe Reader 9 and Acrobat 9
    					Pro</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer and Adobe Acrobat Pro and Reader. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Create a table of contents at the beginning of the OpenOffice.org
    						Writer document:</p>
    						<ulist><item><p> Insert &gt; Indexes and Tables... &gt; Indexes and Tables &gt; Insert
    							Index/Table </p></item></ulist>
    					</item><item><p> Use File &gt; Export as PDF... to convert the document to PDF,
    						specifying Tagged PDF in the Options dialog. </p></item></olist>
    					<p><image><img source="working-examples/PDF2/oo-toc.jpg" height="583" width="944"/><alt>Image of the Insert Index/Table dialog in OpenOffice.org Writer.</alt></image> </p>
    					<p>The table-of-contents entries in the converted document will be linked
    						to the headings in the document, and will appear as PDF Bookmarks in
    						the left-hand Navigation pane. The OpenOffice.org Table of Contents
    						and Bookmarks look the same as they appeared in Example 1. </p>
    					<p>This example is shown in operation in the <loc href="bookmarks.odt" linktype="examples">working example of creating bookmarks with OpenOffice Writer</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding bookmarks using Adobe Acrobat 9 Pro after conversion</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>After conversion to tagged PDF, you may decide to add bookmarks that
    						were not automatically generated. Like the converted bookmarks, tagged
    						bookmarks use the underlying structural information in the document. </p>
    					<olist><item><p> In the Bookmarks panel, choose the options menu, then choose New
    						Bookmarks From Structure... </p></item><item><p> From the Structure Elements dialog, select the elements you want
    							specified as tagged bookmarks. </p></item></olist>
    					<p>The image below shows the Bookmarks options menu. </p>
    					<p><image><img source="working-examples/PDF2/bookmark1.jpg" height="521" width="358"/><alt>The Bookmarks options menu.</alt></image> </p>
    					<p>The next image shows the selection of links in the document for bookmarking. </p>
    					<p><image><img source="working-examples/PDF2/bookmark2.jpg" height="369" width="506"/><alt>The tagged elements that can be used for bookmarking, with 'links' selected.</alt></image> </p>
    					<p>The tagged bookmarks are nested under a new, untitled bookmark. Access
    						the context menu for the new bookmark and select the Rename option
    						to rename the new bookmark, as shown in the following image. </p>
    					<p><image><img source="working-examples/PDF2/link-bookmark.jpg" height="309" width="943"/><alt>The bookmarks for the hyperlink in the document.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="bookmarks.pdf" linktype="examples">working example of creating bookmarks with Acrobat Pro</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating bookmarks with the outline hierarchy</head>
    				<description>
    					<p>The following code fragment illustrates part of an outline hierarchy
    						used to create bookmarks This is typically accomplished by an authoring
    						tool. </p>
    					<codeblock><![CDATA[121 0 obj
 << /Type /Outlines
    /First 22 0 R
    /Last 29 0 R
    /Count 6
 >>
endobj
22 0 obj
 << /Title (Applying Guerrilla Tactics to Usability Testing by People with Disabilities)
    /Parent 21 0 R
    /Next 29 0 R
    /First 25 0 R
    /Last 28 0 R
    /Count 4
    /Dest [3 0 R /XYZ 0 792 0]
 >>
endobj
25 0 obj
 << /Title (Getting started)
    /Parent 22 0 R
    /Next 26 0 R
    /Dest [3 0 R /XYZ null 701 null]
 >>
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 12.3.3 (Document Outline) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G64"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> Check that the Bookmarks panel displays bookmarks. </p></item><item><p> Check that the bookmarks link to the correct sections in the document. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>Check #1 and Check #2 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Creating_bookmarks_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF3">
    		<short-name>Ensuring correct tab and reading order in PDF documents</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-sequence"/>
    			<success-criterion idref="keyboard-operation-keyboard-operable"/>
    			<success-criterion idref="keyboard-operation-all-funcs"/>
    			<success-criterion idref="navigation-mechanisms-focus-order"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The intent of this technique is to ensure that users can navigate
    				through content in a logical order that is consistent with the meaning
    				of the content. Correct tab and reading order is typically accomplished
    				using a tool for authoring PDF. </p>
    			<p>For sighted users, the logical order of PDF content is also the visual
    				order on the screen. For keyboard and assistive technology users, the
    				tab order through content, including interactive elements (form fields
    				and links), determines the order in which these users can navigate
    				the content. The tab order must reflect the logical order of the document. </p>
    			<p>Logical structure is created when a document is saved as tagged PDF.
    				The reading order of a PDF document is the tag order of document elements,
    				including interactive elements. </p>
    			<p>If the reading order is not correct, keyboard and assistive technology
    				users may not be able to understand the content. For example, some
    				documents use multiple columns, and the reading order is clear visually
    				to sighted users as flowing from the top to the bottom of the first
    				column, then to the top of the next column. But if the document is
    				not properly tagged, a screen reader may read the document from top
    				to bottom, across both columns, interpreting them as one column. </p>
    			<p>The simplest way to ensure correct reading order is to structure the
    				document correctly in the authoring tool used to create the document,
    				before conversion to tagged PDF. Note, however, that pages with complex
    				layouts with graphics, tables, footnotes, side-bars, form fields, and
    				other elements may not convert to tagged PDF in the correct reading
    				order. These inconsistencies must then be corrected with repair tools
    				such as Acrobat Pro. </p>
    			<p>When a PDF document containing form fields has a correct reading order,
    				all form fields are contained in the tab order in the appropriate order,
    				and in the correct order relative to other content in the PDF. Common
    				tab-order errors include: </p>
    			<ulist><item><p> Form fields missing from the tagged content. </p></item><item><p> Form fields in the wrong location in the PDF content; e.g., at
    				the end of non-interactive content. </p></item></ulist>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Creating a 2-column document using Microsoft Word 2007</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Multi-column documents created using Word's Page Layout &gt;   Columns...
    						tool typically are in the correct reading order when converted to tagged
    						PDF. The image below shows Word's Columns tool. </p>
    					<p><image><img source="working-examples/PDF3/word-col-tool.jpg" height="381" width="835"/><alt>The Columns tool in Word. Two is selected to lay out the page in 2 columns.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="reading-order-2cols-word.docx" linktype="examples">working example of 2-column document using Word 2007 (Word file)</loc> and <loc href="reading-order-2cols-word.pdf" linktype="examples">working example of 2-column document using Word 2007 (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating a 2-column document using OpenOffice.org Writer
    				2.2</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Multi-column documents created using OpenOffice.org Writer's Format   &gt; Columns...
    						tool typically are in the correct reading order when converted to tagged
    						PDF. The image below shows Writer's Columns tool. </p>
    					<p><image><img source="working-examples/PDF3/oo-2col-tool.jpg" height="532" width="891"/><alt>The Columns tool in OpenOffice.org Writer. Two is selected to lay out the page in 2 columns.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="reading-order-2cols-oo.odt" linktype="examples">working example of 2-column document using OpenOffice Writer (OpenOffice file)</loc> and <loc href="reading-order-2cols-oo.pdf" linktype="examples">working example of 2-column document using OpenOffice Writer (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Setting the tab order for one or more pages using Adobe
    				Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>In a tagged PDF document: </p>
    					<olist><item><p> Open the Pages panel by either:</p>
    						<ulist><item><p> Clicking the Pages icon <image><img source="working-examples/PDF3/pages-icon.jpg" height="43" width="35"/><alt>Pages icon in the upper left of the Adobe Acrobat Pro navigation pane</alt></image> </p></item><item><p> Or selecting View &gt; Navigation Panels &gt; Pages </p></item></ulist>
    					</item><item><p> Select one or more page thumbnails. </p></item><item><p> Access the context menu for the selected thumbnail(s) and select
    						Page Properties... </p></item><item><p> Select the Tab Order tab in the Page Properties dialog. </p></item><item><p> If needed, select a tab order option: </p></item></olist>
    					<table><tbody><tr><th> Option </th><th> Description </th></tr><tr><td><emph role="strong">Use Row Order</emph> </td><td> Tabs from the upper left field, moving first left to right
    						and then down, one table row at a time. </td></tr><tr><td><emph role="strong">Use Column Order</emph> </td><td> Tabs from the upper left field, moving first from top to
    							bottom and then across from left to right, one table column
    							at a time. </td></tr><tr><td><emph role="strong">Use Document Structure</emph> </td><td> For tagged documents, moves in the tag order specified by
    								the authoring application.
    								<note><p>This is usually the correct reading
    									order and will be selected by default for tagged documents. </p></note></td></tr><tr><td><emph role="strong">Unspecified</emph> </td><td> If the document was created using an earlier version of
    									Acrobat Pro, the tab order is Unspecified by default. With
    									this setting, form fields are tabbed through first, followed
    									by links and then comments ordered by row. This may not be
    									correct reading order. </td></tr></tbody></table>
    					<p><image><img source="working-examples/PDF3/page-props.jpg" height="430" width="566"/><alt>Page properties in Adobe Acrobat Professional. The choices are Use Row Order, Use Column Order, Use Document Structure, Unspecified. Use Document Structure is selected. This is also the default.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="reading-order.docx" linktype="examples">working example of setting the tab order (Word file)</loc> and <loc href="reading-order.pdf" linktype="examples">working example of setting the tab order (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Checking the reading order using Reflow in Adobe Acrobat
    				9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>To quickly check the reading order of your PDF document, use the Reflow
    						view in Adobe Acrobat Pro as follows: </p>
    					<ulist><item><p> View &gt; Zoom &gt; Reflow </p></item></ulist>
    					<p>If the tagged PDF does not reflow in the correct reading order, you
    						can use the authoring tool to repair reading order problems and re-convert
    						the document to tagged PDF. If you do not have access to the original
    						document and authoring tool, you can use the Order panel in the TouchUp
    						Reading Order tool to resolve reading order problems (see Examples
    						3 and 4). </p>
    					<p>The following image shows a 2-column document converted to tagged
    						PDF. </p>
    					<p><image><img source="working-examples/PDF3/reflow1.jpg" height="539" width="509"/><alt>Image of a 2-column document in Adobe Acrobat Pro.</alt></image> </p>
    					<p>The following image shows the same 2-column document in reflow view. </p>
    					<p><image><img source="working-examples/PDF3/reflow2.jpg" height="322" width="844"/><alt>Image of a 2-column document in the Reflow view in Adobe Acrobat Pro.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Checking the reading order using the Order panel in Adobe
    				Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>To display the reading order of a document: </p>
    					<olist><item><p> Advanced &gt; Accessibility &gt; Touch Up Reading Order... </p></item><item><p> Select the Show Order Panel button </p></item></olist>
    					<p>In the TouchUp Reading Order tool, make sure the Show Page Content
    						Order check box is checked. Each section of contiguous page content
    						appears as a separate highlighted region and is numbered according
    						to its placement in the reading order. </p>
    					<p>Note in the following image, the required-field text precedes the
    						header in the reading order: it should follow the header. These are
    						items 6 and 7 in the content order. Example 6 shows how to repair the
    						order. </p>
    					<p><image><img source="working-examples/PDF3/readingorder1.jpg" height="633" width="622"/><alt>The text and form fields in a PDF document in Adobe Acrobat Pro. The reading order is shown in the Order panel and by the numbers in the highlighted sections of the page content. The items 6 and 7 are in the wrong content order and must be switched.</alt></image>  </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Repairing the reading order using the Order panel in Adobe
    				Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software 
tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>To correct the reading order in Example 5, use the Order panel: </p>
    					<olist><item><p> Either:</p>
    						<ulist><item><p> Drag-and-drop the header to precede the required-field text,
    							or </p></item><item><p> Cut-and-paste the text to follow the header. </p></item></ulist>
    					</item></olist>
    					<p>In the following image, the reading order is correct for the text
    						and header. That is, the content elements numbered 6 and 7 have been
    						switched into the correct reading order. </p>
    					<p><image><img source="working-examples/PDF3/readingorder2.jpg" height="514" width="637"/><alt> The corrected reading order In Adobe Acrobat Pro. Items 6 and 7 have been switched and are now in the correct order.</alt></image>  </p>
    					<p>After this correction all content is in the correct reading order:
    						the text preceding the form, the form fields, and the text following
    						the form. Users can navigate from the text into and out of the form
    						fields, in the correct order. </p>
    					<note diff="add"><p>Reordering content with the Order panel is most appropriate for
    						simple text content within a PDF since modifications made with the
    						order panel can affect not only the reading order but the underlying
    						structure of content contained within the PDF.  This may impact the
    						z-order for content on a page, including making some content become
    						hidden behind other content.  Authors should save their work before
    						using the order panel and verify that the changes do not have adverse effects on the document.</p></note>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Repairing the reading order using the Tags panel in Adobe
    				Acrobat 9 Pro</head>
    				<description>
    					<p>This example is shown with Adobe Acrobat Pro. There are other software
    					tools that perform similar functions. See the list of other software
    					tools in PDF Authoring Tools that Provide Accessibility Support
    					(http://trace.wisc.edu/wcag_wiki/index.php?title=PDF_Technology_Notes).</p>
    					<p>To correct the reading order in Example 5, use the Tags panel, and either</p>
    					<ulist>
    						<item><p>Drag-and-drop the <el>H1</el> tag to precede the required-field text
    						(tagged <el>H2</el>), or</p></item>
    						<item><p>Cut-and-paste the <el>H2</el> tag to follow the <el>H1</el> tag.</p></item>
    					</ulist>
					<p>In the following image, the reading order is correct for the text and
    								header. That is, the content elements <el>H1</el> and <el>H2</el> have been switched
    								into the correct reading order.</p>
    					<p><image><img source="working-examples/PDF3/tab-order.jpg"/><alt>Image showing the corrected reading order In
    						Adobe Acrobat Pro. The tags <el>H1</el> and <el>H2</el> have been switched and are
    							now in the correct order.</alt></image></p>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8 (Tagged PDF) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
    					<item><p diff="add"><loc href="http://help.adobe.com/en_US/acrobat/pro/using/WS58a04a822e3e50102bd615109794195ff-7ce6.w.html">Adobe Acrobat 9 Pro Help</loc></p></item>
    					<item><p diff="add"><loc href="http://www.pdf-accessible.com/IMG/pdf/making-PDF-accessible-Acrobat.pdf">Making PDF documents accessible with Adobe Acrobat Pro</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G57"/>
    			<relatedtech idref="G59"/>
    			<relatedtech idref="G202"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> Verify that the content is in the correct reading order by one
    					of the following:</p>
    					<ulist><item><p> Read the PDF document with a screen reader or a tool that reads aloud, listening to hear that each element is read in
    						the correct order. </p></item><item><p> Reflow the pages and visually inspect the reading order. </p></item><item><p> Use a tool that exposes the document through the accessibility
    							API, and verify that the reading order is correct. </p></item></ulist>
    				</item><item><p> Verify that the tab order is correct for focusable content by
    					one of the following:</p>
    					<ulist><item><p> Use the tab key to traverse the focus order in the document. </p></item><item><p> Use a tool that is capable of showing the page object entry
    						that specifies the tab order setting to open the PDF document
    						and view the setting. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 and Check #2 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Ensuring_correct_tab_and_reading_order_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF4">
    		<short-name>Hiding decorative images with the Artifact tag in PDF documents</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="text-equiv-all"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The purpose of this technique is to show how purely decorative images
    				in PDF documents can be marked so that they can be ignored by Assistive
    				Technology by using the /Artifact tag. This is typically accomplished
    				by using a tool for authoring PDF. </p>
    			<p>In PDF, artifacts are generally graphics objects or other markings
    				that are not part of the authored content. Examples of artifacts include
    				page header or footer information, lines or other graphics separating
    				sections of the page, or decorative images. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Marking a background image as an artifact using Adobe
    					Acrobat 9 Pro's TouchUp Reading Order Tool</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>The TouchUp Reading Order Tool can be used to mark an image as "Background," which
    						removes it from the document tag structure. </p>
    					<olist><item><p> Open the TouchUp Reading Order Tool in Acrobat Pro: Advanced &gt; Accessibility &gt; TouchUp
    						Reading Order </p></item><item><p> Select the decorative image in the document </p></item><item><p> In the TouchUp Reading Order Tool, click the Background button
    							to remove the selected image from the tag structure </p></item></olist>
    					<p>The screenshot below illustrates this example. </p>
    					<p><image><img source="working-examples/PDF4/turo_background.gif" height="501" width="267"/><alt>screen shot showing use of the TouchUp Reading Order panel to remove an image from the tag tree</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="decorative-image.docx" linktype="examples">working example of creating a decorative image (Word file)</loc> and <loc href="decorative-image.pdf" linktype="examples">working example of marking a background image as an artifact (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking an image as an artifact in a PDF document using
    				an /Artifact tag or property list</head>
    				<description>
    					<p>The PDF specification allows images to be marked as "artifacts" as
    						defined in Section 14.8.2.2 (Real Content and Artifacts) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    							1.7 (ISO 32000-1)</loc>. An artifact is explicitly distinguished from
    						real content by enclosing it in a marked-content sequence with the
    						/Artifact tag. </p>
    					<p>/Artifact </p>
    					<codeblock>BMC  ...  EMC    </codeblock>
    					<p>or </p>
    					<p>/Artifact propertyList </p>
    					<codeblock>BDC  ...  EMC  </codeblock>
    					<p>The first is used to identify a generic artifact; the second is
    						used for artifacts that have an associated property list. Note, to
    						aid in text reflow, artifacts should be defined with property lists
    						whenever possible. Artifacts lacking a specified bounding box are
    						likely to be discarded during reflow. </p>
    					<p>Property list entries for artifacts include Type, BBox, Attached,
    						and Subtype. </p>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8.2.2 (Real Content and Artifacts) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<tests>
    			<procedure>
    				<olist><item><p>For an image that is purely decorative, use one of the following
    					to verify that it is marked as an artifact:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that the decorative image is not announced when 
reading the content line-by-line. </p></item><item><p> Using a PDF editor, make sure the decorative image is marked as an artifact. </p></item><item><p> Reflow the document and make sure the
    								decorative image does not appear on the page. </p></item><item><p> Use a tool that is capable of showing the /Artifact entry
    									or property list, such as aDesigner, to open the PDF document
    									and verify that decorative images are marked as artifacts. </p></item><item><p> Use a tool
that exposes the document through the accessibility API and verify that the
decorative image is not exposed through the API. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Hiding_decorative_images_with_the_Artifact_tag_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF5">
    		<short-name>Indicating required form controls in PDF forms</short-name>
    		<applicability>
    			<p>Tagged PDF documents with forms</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="minimize-error-identified"/>
    			<success-criterion idref="minimize-error-cues"/>
    			<success-criterion idref="minimize-error-suggestions"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to notify the user when a field
    				that must be completed has not been completed in a PDF form. Required
    				fields are implemented using the /Ff entry in the form field's dictionary
    				(see Table 220 in Section 12.7 (Interactive Forms) of <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc>. This is normally accomplished using a tool for
    				authoring PDF. </p>
    			<p>If errors are found, an alert dialog describes the nature of the error
    				in text. This may be accomplished through scripting created by the
    				author (see, for example, <loc href="SCR18" linktype="techniques">SCR18:
    					Providing client-side validation and alert</loc>). User agents, such
    				as Adobe Acrobat Pro and LiveCycle, can provide automatic alerts (as
    				described in the examples below). </p>
    			<p><emph role="strong">Note</emph>: once the user dismisses the alert dialog, it
    				may be helpful if the script positions the keyboard focus on the field
    				where the error occurred, although some users may expect the focus
    				to remain on the last control focused prior to the alert appearing.
    				Authors should exercise care to ensure that any movement of the focus
    				will be expected. For example, if the alert announces a missing required
    				phone number, positioning the focus on the phone number field when
    				the alert is dismissed can be regarded as helpful and expected. In
    				some cases, however, this may not be possible. If multiple input errors
    				occur on the page, another approach must be taken to error reporting. 
(See, for example, the <loc href="http://www.adobe.com/devnet/acrobat/javascript.html">Adobe scripting resources.</loc>) </p>
    			<p>Ensuring that users are aware an error has occurred, can determine
    				what is wrong, and can correct it are keys to software usability and
    				accessibility. Meeting this objective helps ensure that all users can
    				complete transactions with ease and confidence. </p>
    			<section id="PDF5_labels">
    				<head> Labels for required form controls </head>
    			<p>It is also important that users are aware that an error <emph role="strong">may</emph> occur.
    				You can incorporate this information in labels; for example,   "Date
    				(required)" or the use of a red asterisk to indicate required
    				fields. (Make sure that a legend appears on each form with required
    				fields, e.g., "* = required field".) See <specref ref="PDF10"/>. </p>
    			</section>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Creating a required field in a PDF form using Adobe Acrobat
    					9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Access the context menu of the field and select the Properties
    						dialog. </p></item><item><p> If the field is required, check the Required box. This checkbox
    							forces the user to fill in the selected form field. If the user attempts
    							to submit the form while a required field is blank, an error message
    							appears and the empty required form field is highlighted. </p></item></olist>
    					<p><image><img source="working-examples/PDF5/form4.jpg" height="388" width="642"/><alt>The Properties dialog for a form field. The Required box is checked.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="required-fields.pdf" linktype="examples">working example of creating a required field in Acrobat</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating a required field in a PDF form using Adobe LiveCycle
    				Designer ES 8.2.1</head>
    				<description>
<p>This example is shown with Adobe LiveCycle Designer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Access the context menu of the form control, select Palettes,
    						and select Object. </p></item><item><p> Select "User entered - Required" from the Type pulldown. </p></item><item><p> Enter an error message in the "Empty Message" field.
    							This message appears when a user tries to submit the form without
    							entering a value in the required field. </p></item></olist>
    					<p>If the user attempts to submit the form with a required field left
    						blank, the Empty Message text appears and the empty required field
    						is highlighted. </p>
    					<p>The image below shows the Adobe LiveCycle Object palette with the
    						required selection. </p>
    					<p><image><img source="working-examples/PDF5/lc-required2.gif" height="468" width="345"/><alt>Image of Adobe LiveCycle Object palette showing the 'User entered - Required' selection.</alt></image> </p>
    					<p>You can also add explicit text to the form label to indicate required
    					fields (e.g., "(Required)"). </p>
    					<p>This example is shown in operation in the <loc href="required-fields-lc.pdf" linktype="examples">working example of creating a required field in LiveCycle Designer</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a required text field in a PDF form using the /Tx
    				field type and Ff flag</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for the
    						object definitions for a typical text field. Note that the text field
    						is required, using the Ff flag. This is typically accomplished by an
    						authoring tool. </p>
    					<codeblock><![CDATA[<< /AP -dict-                                                   
   /DA /Helv  0 Tf 0 g
   /DR -dict-
   /F 0x4
   /FT Tx              % FT key set to Tx for Text Field
   /Ff 0x2             % Ff integer 0x2 value indicates required
   /P -dict-
   /Rect -array-
   /StructParent 0x1
   /Subtype Widget
   /T First            % Partial field name First
   /TU First name (required)  % TU tool tip value serves as short description
   /Type Annot
   /V Pat Jones
>>
...
<Start Stream>
 BT
  /P <</MCID 0 >>BDC
  /CS0 cs 0  scn 
  /TT0 1 Tf
    -0.001 Tc 0.003 Tw 11.04 0 0 11.04 72 709.56 Tm
    [(P)-6(le)-3(as)10(e)-3( )11(P)-6(rin)2(t)-3( Y)8(o)-7(u)2(r N)4(a)11(m)-6(e)]TJ
  0 Tc 0 Tw 9.533 0 Td
  ( )Tj
  -0.004 Tc 0.004 Tw 0.217 0 Td
  [(\()-5(R)-4(e)5(q)-1(u)-1(i)-3(r)-3(e)-6(d)-1(\))]TJ
 EMC
  /P <</MCID 1 >>BDC
  0 Tc 0 Tw 4.283 0 Td
  [( )-2( )]TJ
   EMC
   /ArtifactSpan <</MCID 2 >>BDC
   0.002 Tc -0.002 Tw 0.456 0 Td
  [(__)11(___)11(___)11(___)11(___)11(_)11(____)11(___)11(___)11(__)]TJ
  0 Tc 0 Tw 13.391 0 Td
  ( )Tj
  EMC
 ET
<End Stream>
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also><ulist><item><p> Section 12.7 (Interactive Forms) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    				1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/xml/index_arch.html">Adobe
    					XML Forms Architecture (XFA)</loc> </p></item>
    				<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist></see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G83"/>
    			<relatedtech idref="H90"/>
    			<relatedtech idref="SCR18"/>
    			<relatedtech idref="PDF23"/>
    			<relatedtech idref="PDF10"/>
    			<relatedtech idref="PDF22"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<p>For each form field that is required, verify that validation information
    					and instructions are provided by applying the following: </p>
    				<olist><item><p> Check that the required status is indicated in the form control's
    					label. </p></item><item><p> Leave the field blank and submit the form. Check that an alert
    						describing the error is provided. </p></item><item><p> Use a tool that exposes the document through the accessibility
    							API, and verify that the required property is indicated. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1, #2, and #3 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Indicating_required_form_controls_in_PDF_forms"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF6">
    		<short-name><phrase diff="chg">Using table elements for table markup in PDF Documents</phrase></short-name>
    		<applicability>
    			<p>Tagged PDF documents with tables</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The purpose of this technique is to show how tables in PDF documents
    				can be marked up so that they are recognized by assistive technology.
    				This is typically accomplished by using a tool for authoring PDF. </p>
    			<p>Tabular information must be presented in a way that preserves relationships
    				within the information even when users cannot see the table or the
    				presentation format is changed. Information is considered tabular when
    				logical relationships among text, numbers, images, or other data exist
    				in two dimensions (vertical and horizontal). These relationships are
    				represented in columns and rows, and the columns and rows must be recognizable
    				in order for the logical relationships to be perceived. </p>
    			<p>Tagged tables can be created using the Add Tags to Document feature
    				in Adobe Acrobat, using the Object Library in Adobe LiveCycle, or converting
    				tables to PDF from a third-party application, such as Microsoft Word.
    				However, the resulting tables may not be tagged correctly and you should
    				ensure that table tagging issues are resolved. </p>
    			<p>Within PDF documents, a table uses the following structure types for
    				table elements: </p>
    			<ulist><item><p> A table element (<emph>Table</emph>). </p></item><item><p> One or more table row elements(<emph>TR</emph>) which define each
    				row of table cells as immediate children of the <emph>Table</emph> element. </p></item><item><p> One or more table header elements (<emph>TH</emph>) or table data
    					elements (<emph>TD</emph>) as the immediate children of each table row
    					element. </p></item><item><p> Cells that span two or more rows or columns should use the <emph>RowSpan</emph> or <emph>ColSpan</emph> attribute. </p></item><item><p> For tables that contain blank cells, you may need to add empty <emph>TD</emph> cells
    						so that each row or column has the same number of cells. </p></item></ulist>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Creating tables in Microsoft Word 2007 that have correctly
    					tagged headings when converted to PDF</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Access the table header row's context menu and select Table Properties... </p></item><item><p> Select the Row tab. </p></item><item><p> Check "Repeat as header at the top of each page" as
    						shown in the following image. </p></item></olist>
    					<p><image><img source="working-examples/PDF6/word-table.jpg" height="440" width="414"/><alt>Image of Table properties dialog for the first table row in Word, with the Row tab selected. 'Repeat as header at the top of each page' is checked to ensure that the first row is marked as header cells.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="table-example-noheaderrow.docx" linktype="examples">working example of tagged table headings in Word 2007</loc>.</p>
    					<note diff="add"><p>Microsoft Word can only mark up cells as column headings, not as row headings.  Only the first row can be marked as heading for all table columns.  When the table has row headings or a more complex heading structure, this mark-up must be added in a PDF editor such as Acrobat Pro.</p></note>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating tables in OpenOffice.org Writer 2.2 that have
    				correctly tagged headings when converted to PDF</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Access the table's context menu and select Table... </p></item><item><p> Select the Table Format tab. </p></item><item><p> Check Repeat Heading and select "1" in the First Rows
    						listbox as shown in the following image. </p></item></olist>
    					<p><image><img source="working-examples/PDF6/openofficetableheads.jpg" height="445" width="556"/><alt>Image of Table dialog in OpenOffice.org Writer with Table Format tab selected. Repeat Heading is checked and 1 is selected in the First Rows listbox to ensure that the first row is marked as header cells.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="table-example-noheaderrow.odt" linktype="examples">working example of tagged table headings in OpenOffice Writer</loc>.</p>
    					<note diff="add"><p>OpenOffice.org Writer can only mark up cells as column headings, not as row headings.  Only the first row can be marked as heading for all table columns.  When the table has row headings or a more complex heading structure, this mark-up must be added in a PDF editor such as Acrobat Pro.</p></note>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Modifying table tags using the Tags tab in Adobe Acrobat
    				9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>To check that a converted document with tables has correct table tagging: </p>
    					<ulist><item><p> In the View menu, select Navigation Panel, then select Tags. </p></item></ulist>
    					<p><image><img source="working-examples/PDF6/table-example.jpg" height="411" width="498"/><alt>Table in Adobe Acrobat Pro showing the Tags tab opened to display the table tags. All table cells are marked TD.</alt></image> </p>
    					<p>Note that in this case, the table headers were not formatted as illustrated
    						in Examples 1 and 2, and are marked as data cells (<emph>TD</emph>). To
    						change these to <emph>TH</emph> tags: </p>
    					<olist><item><p> On the Tags tab, open the table row that contains the header cells,
    						as shown on the image above. </p></item><item><p> Select on the first data cell and select Properties... </p></item><item><p> On the Tags tab in the Properties dialog, use the Type dropdown
    							to change Table Data Cell to Table Header Cell. </p></item><item><p> Repeat for all the table header cells in the first table row. </p></item></olist>
    					<p><image><img source="working-examples/PDF6/table-example2.jpg" height="635" width="833"/><alt>Table in Adobe Acrobat Pro showing the use of the Tag Properties dialog to change data cells to header cells</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="table-example-repaired.pdf" linktype="examples">working example of tagged table headings in Acrobat</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking up a table using table structure elements</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for a
    					simple table (header row and data row) such as shown in Examples 1-3: </p>
    					<codeblock><![CDATA[95 0 obj                %Structure element for a table
 << 
  /A 39 0 R
  /K[96 0 R 101 0 R 106 0 R 111 0 R]
  /P 93 0 R
  /S/Table              %standard structure type is table
 >> 
 endobj
96 0 obj                %Structure element for a table row
 << 
  /K[97 0 R 98 0 R 99 0 R 100 0 R]
  /P 95 0 R
  /S/TR                 %standard structure type is table row
 >> 
 endobj
97 0 obj                %Structure element for a table header
 <</A[23 0 R 120 0 R]
   /K 1
   /P 96 0 R
   /S/TH                 %standard structure type is table head
   /Pg 8 0 R
 >> 
endobj
104 0 obj                %Structure element for table data (cell contents)
 << 
  /A 29 0 R
  /K 7
  /P 101 0 R
  /S/TD                  %standard structure type is table data
  /Pg 8 0 R
 >> 
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8.4.3.4 (Table Elements) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="H51"/>
    			<relatedtech idref="PDF20"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p>For each table, confirm one of the following:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that the tabular information is presented in a way that preserves
    						logical relationships among the table header and data cells. </p></item><item><p> Using a PDF editor, verify that the appropriate <emph>TR</emph>, <emph>TH</emph>,
    							and <emph>TD</emph> tags are in the proper reading order and hierarchy
    							in the table tree. </p></item><item><p> Use a tool which is capable of showing the table elements
    								to open the PDF document, view the table structure, and verify
    								that it contains the appropriate TR, TH, and TD structures. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API, and verify that the table structure contains the appropriate
    									TR, TH, and TD structures, and that they are in the proper reading
    									order and hierarchy. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Making_tables_accessible_in_PDF_documents_by_using_table_elements"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF7">
    		<short-name>Performing OCR on a scanned PDF document to provide actual text</short-name>
    		<applicability>
    			<p>Scanned PDF documents</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="visual-audio-contrast-text-presentation"/>
    			<success-criterion idref="visual-audio-contrast-text-images"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The intent of this technique is to ensure that visually rendered text
    				is presented in such a manner that it can be perceived without its
    				visual presentation interfering with its readability. </p>
    			<p>A document that consists of scanned images of text is inherently inaccessible
    				because the content of the document is images, not searchable text.
    				Assistive technologies cannot read or extract the words; users cannot
    				select, edit, resize, or reflow text nor can they change text and background
    				colors; and authors cannot manipulate the PDF for accessibility. </p>
    			<p>For these reasons, authors should use actual text rather than images
    				of text, using an authoring tool such as Microsoft Word or Oracle Open
    				Office to author and convert content to PDF. </p>
    			<p>If authors do not have access to the source file and authoring tool,
    				scanned images of text can be converted to PDF using optical character
    				recognition (OCR). Adobe Acrobat Pro can then be used to create accessible
    				text. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Generating actual text rather than images of text using
    					Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>This example uses a simple one-page scanned image of text. To ensure
    						that actual text is stored in the document, perform the following steps: </p>
    					<olist>
    						<item><p> Scan the document using as high a resolution as possible to improve
    						the OCR performance. </p></item>
    						<item><p> Load the scanned document in Acrobat Acrobat Pro. Select Document &gt; OCR
    						Text Recognition &gt; Recognize Text Using OCR... </p></item>
    						<item><p> In the next dialog, select the All Pages radio button under Pages
    								(or Current Page if you are converting only one page), and then select
    								OK. </p></item>
    						<item><p> Under the Settings list, select Edit. In the next dialog, select
    									Formatted Text and Graphics in the PDF Output Style drop-down list.
    									This is important for ensuring accessibility. </p></item>
    						<item><p> Depending on the resolution and how clear the text was, OCR converts
    										images of words and characters to actual text. Text that Acrobat
    										Pro does not recognize is listed as an "OCR suspect," or
    										text element that Acrobat suspects was not recognized correctly. </p></item>
    						<item><p> To fix the suspects, choose Document &gt; OCR Text Recognition   &gt; Find
    											First OCR Suspect. Acrobat Pro presents each suspect one at a time,
    											which can be corrected using Acrobat Pro touchup tools. </p></item>
    						<item><p> Run Advanced &gt; Accessibility &gt; Add Tags to Document </p></item>
    						<item><p> Test for accessibility: Advanced &gt; Accessibility &gt; Full
    						Check... </p></item>
    					</olist>
    					<note><p>Alternatively, you can use Document &gt; OCR
    						Text Recognition &gt; Find All OCR Suspects to display all OCR suspects
    						at the same time for faster editing. </p></note>
    					<p>The following image shows a scanned one-page document in Adobe Acrobat
    						Pro. </p>
    					<p><image><img source="working-examples/PDF7/ocr1.jpg" height="578" width="857"/><alt>A scanned page in Acrobat Pro showing soup recipes. </alt></image> </p>
    					<p>The next image shows the converted content after adding tags to the
    						document. It will probably be necessary to use the TouchUp Reading
    						Order tool and the Tags panel to tag the content properly for the intended
    						final document. For this example, the image of the spiral book binding
    						was tagged in the conversion. The TouchUp Reading Order tool was used
    						to hide the image as a background (decorative) image (see <specref ref="PDF4"/>). The recipe
    						titles were tagged as first level headers. </p>
    					<p><image><img source="working-examples/PDF7/ocr3.jpg" height="597" width="918"/><alt>A tagged converted page in Acrobat Pro showing soup recipes. The name of each soup is a first level header. The image of the spiral book binding was hidden as a decorative image.</alt></image> </p>
    					<p>Note: Acrobat Pro may automatically add tags when the file is run
    					through OCR. </p>
    					<p>This example is shown in operation in the <loc href="ocr-example.pdf" linktype="examples">working example of generating actual text</loc> and the <loc href="ocr-example-tagged.pdf" linktype="examples">result of performing OCR</loc>.</p>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
    				</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G140"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For each page converted to text using OCR, ensure that the resulting
    					PDF has been converted correctly, using one of the following ways:</p>
    					<ulist><item><p> Read the PDF document with a screen reader or a tool that reads aloud, listening to hear that all text is read correctly
    						and in the correct reading order. </p></item><item><p> Save the document as text and check that the converted text
    							is complete and in the correct reading order. </p></item><item><p> Use a tool that is capable of showing the converted content
    								to open the PDF document and verify that all text was converted
    								and is in the correct reading order. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API and verify that all text was converted and is in the correct
    									reading order. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Performing_OCR_on_a_scanned_PDF_document_to_provide_actual_text"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF8">
    		<short-name>Providing definitions for abbreviations via an E entry for a structure
    			element</short-name>
    		<applicability>
    			<p>Tagged PDF documents containing abbreviations or acronyms</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="meaning-located"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to provide an expansion or definition
    				of an abbreviation for the first occurrence of the abbreviation. For
    				example, a reference to an abbreviation, such as   "WCAG," should
    				be available as   "Web Content Accessibility Guidelines (WCAG)" on
    				its first occurrence in a document. </p>
    			<p>This is done by setting expansion text using an /E entry for a structure
    				element, and is normally accomplished using a tool for authoring PDF.
    				A Span structure element is typically used to tag the abbreviation,
    				but the /E entry is valid with any structure element. </p>
    			<p>This technique is applicable for any abbreviation, including acronyms
    				and initialisms. Note that on the first occurrence of the abbreviation,
    				both the abbreviation and the expansion text must be provided. This
    				will aid recognition of later use of the abbreviation. </p>
    			<p>PDF documents may be enhanced by providing expansions for abbreviations.
    				In fact, such expansions are required for accessibility to ensure understanding
    				by people who have difficulty decoding words; rely on screen magnification
    				(which may obscure context); have limited memory; or who have difficulty
    				using context to aid understanding. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding an /E entry to an abbreviation using Adobe Acrobat
    					9 Pro's Tags panel</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>In a tagged PDF document: </p>
    					<olist><item><p> Select the Tags panel, using Views &gt; Navigation Panes &gt; Tags </p></item><item><p>Select the first instance of the abbreviated text that needs to be expanded. If the selected text is part of a larger tag, access the Tags panel options menu, select Create Tag from Selection, and create a new Span tag. In this example, the text "WCAG2" (within the LBody tag) has been enclosed in a Span tag.</p></item><item><p> In the Tags panel, access the context menu for the spanned text
    							and select Properties... to open the TouchUp Properties dialog for
    							the Span tag. </p></item><item><p> On the Content tab of the TouchUp Properties dialog, enter the
    								expansion text, followed by the originally selected text. </p></item></olist>
    					<p>The following image illustrates this technique: </p>
    					<p><image><img source="working-examples/PDF8/abbr.jpg" height="662" width="521"/><alt>The addition of expansion text to an abbreviation using the Tags panel. The text 'WCAG2.0' has been selected and a Span tag created for it. The expansion text 'Web Content Accessibility Guidelines (WCAG) 2.0' is entered as the expansion of 'WCAG2.0' using the TouchUp Properties dialog </alt></image> </p>
    					<p>This example is shown in operation in the <loc href="headers-definitions.docx" linktype="examples">working example of Providing definitions for Abbreviations (Word document)</loc>, <loc href="headers-definitions.odt" linktype="examples">working example of Providing definitions for Abbreviations (OpenOffice document)</loc>, and <loc href="headers-definitions.pdf" linktype="examples">working example of Providing definitions for Abbreviations (PDF document)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Using a /Span structure element with an /E entry to define
    				an abbreviation</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for using
    						the /Span structure element to define an abbreviation. </p>
    					<p>This example uses the sentence "Sugar is commonly sold in 5 lb
    						bags." The abbreviation "lb" is tagged as a /Span structure
    						element with an /E entry (typically accomplished by an authoring tool). </p>
    					<codeblock><![CDATA[ 1 0 obj                                  % structure element
   << /Type /StructElemen
            /S /Span                      % element type
            /P ...                        % Parent in structure hierarchy
            /K << /Type /MCR
                        /Page 2 0 R       % Page containing marked-content sequence
                        /MCID 0           % Marked content identifier for "lb"
               >>
            /E  (pound, lb)
    >>
 endobj
]]></codeblock>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Using a /TH structure element with an /E entry to define
    				an abbreviation</head>
    				<description>
    					<p>As noted in the Description, the /E entry is valid with any structure
    						element. </p>
    					<p>The following code fragment illustrates code that is typical for using
    						an /E entry to define an abbreviation. </p>
    					<p>A table that contains columns for each month uses abbreviations as
    						the values of column headers. The expansion for each abbreviation is
    						provided as the /E entry of the /TH structure element (typically accomplished
    						by an authoring tool). </p>
    					<codeblock><![CDATA[ 1 0 obj                                  % structure element
   << /Type /StructElemen
            /S /TH                        % element type
            /P ...                        % Parent in structure hierarchy
            /K << /Type /MCR
                        /Page 2 0 R       % Page containing marked-content sequence
                        /MCID 0           % Marked content identifier for "Dec"
               >>
            /E  (December, Dec)
    >>
 endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.9.5 (Expansion of Abbreviations and Acronyms) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://help.adobe.com/en_US/Acrobat/9.0/Professional/WS58a04a822e3e50102bd615109794195ff-7ce1.w.html">Add
    						alternate text and supplementary information to tags</loc> </p></item><item><p> <loc href="http://msdn.microsoft.com/en-us/library/dd318521%28VS.85%29.aspx">Microsoft
    							Inspect.exe tool</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G102"/>
    			<relatedtech idref="G55"/>
    			<relatedtech idref="G62"/>
    			<relatedtech idref="G70"/>
    			<relatedtech idref="G97"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> Verify that the first occurrence of abbreviations that require
    					expansion text have /E entries on an enclosing tag by one of the
    					following and that both the abbreviation and the expansion text are
    					provided:</p>
    					<ulist><item><p> In Windows, use Microsoft's Inspect.exe tool, or some other
    						tool that allows inspection of the MSAA interface, to locate
    						the text of the abbreviation in the document tree and ensure
    						that the value of the abbreviation is in the expansion text. </p></item><item><p> In a PDF editor, locate the tag
    							for the text that is the abbreviation, and check that an expansion
    							or definition is provided for each abbreviation in the Expansion
    							Text field in the corresponding tag's properties. </p></item><item><p> Read the PDF document with a screen reader, listening to hear
    								that on the first occurrence, the abbreviation and expansion
    								are read when the screen reader reads the content line-by-line. </p></item><item><p> Use a tool that is capable of showing the /E entry value,
    									such as aDesigner to open the PDF document and view the GUI summary
    									to read the text expansions for abbreviations. </p></item><item><p> Use a tool that exposes the document through the accessibility
    										API and verify that the text expansion of the abbreviation is
    										properly implemented. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>Check #1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_definitions_for_abbreviations_via_an_E_entry_for_a_structure_element"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF9">
    		<short-name>Providing headings by marking content with heading tags in PDF documents</short-name>
    		<applicability>
    			<p>Tagged PDF documents with headings</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    			<success-criterion idref="navigation-mechanisms-skip"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The purpose of this technique is to show how headings in PDF documents
    				can be marked so that they are recognized by assistive technologies.
    				This is typically accomplished by using a tool for authoring PDF. </p>
    			<p>Heading markup can be used: </p>
    			<ulist><item><p> to indicate start of main content </p></item><item><p> to mark up section headings within the main content area </p></item><item><p> to demarcate different navigational sections, such as top or main
    				navigation, left or secondary navigation, and footer navigation </p></item><item><p> to mark up images (containing text) which have the appearance
    					of headings visually. </p></item></ulist>
    			<p>In some technologies, headings are designed to convey logical hierarchy.
    				Skipping levels in the sequence of headings may create the impression
    				that the structure of the document has not been properly thought through
    				or that specific headings have been chosen for their visual rendering
    				rather than their meaning. Authors are encouraged to nest headings
    				hierarchically. </p>
    			<p>Because headings indicate the start of important sections of content,
    				it is possible for assistive technology users to access the list of
    				headings and to jump directly to the appropriate heading and begin
    				reading the content. This ability to "skim" the content through
    				the headings and go directly to content of interest significantly speeds
    				interaction for users who would otherwise access the content slowly. </p>
    			<p>For example, in HTML documents, HTML headings are converted to correctly tagged
    				PDF headings when the h1-h6 HTML tags are used correctly. See the general
    				technique <loc href="G141" linktype="techniques">G141:
    					Organizing a page using headings</loc> for information about using headings. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding or modifying tagged headings in PDF documents
    					with Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<section>
    						<head> Using the Touchup Reading Order tool</head>
    						<p>One method of adding headings to PDF documents uses the Touchup Reading
    							Order tool: </p>
    						<olist><item><p> Open the PDF document in Adobe Acrobat Pro </p></item><item><p> Select Advanced &gt; Accessibility &gt; TouchUp Reading Order... </p></item><item><p> Click the Show Order Panel button on the TouchUp Reading Order
    							panel </p></item><item><p> View the tags in the Show Order panel. </p></item></olist>
    						<p>The following image shows a PDF document opened in Adobe Acrobat Pro.
    							The Tags panel is open, showing heading text "Cooking techniques"   tagged
    							as H1 and "Cooking with oil" tagged as H2. The text "Cooking
    							with butter" should be tagged as H2 but is not. </p>
    						<p><image><img source="working-examples/PDF9/cooking-headings1.gif" height="326" width="539"/><alt> PDF document opened in Adobe Acrobat. The Tags panel shows the headings in the tag tree. Text that should be tagged as H2 is incorrectly tagged as a paragraph.</alt></image> </p>
    						<p>To correct the H2 heading, use the TouchUp Reading Order panel as
    							follows: </p>
    						<olist><item><p> Left click and drag a selection box over the content you want to
    							tag. </p></item><item><p> Select the Heading 2 tag from the TouchUp Reading Order panel. </p></item></olist>
    						<p>The following image shows the PDF document opened in Adobe Acrobat
    							Pro. The TouchUp Reading Order panel is visible. A selection box appears
    							around the text "Cooking with butter," and Heading 2 on the
    							panel is selected. </p>
    						<p><image><img source="working-examples/PDF9/cooking-headings2.gif" height="607" width="585"/><alt> PDF document opened in Adobe Acrobat. The TouchUp Reading Order panel is visible; the heading text is selected and Heading 2 on the panel is selected.</alt></image> </p>
    						<p> Finally, click the Show Order Panel button on the TouchUp Reading Order
    							panel. </p>
    						<p>The following image shows the PDF document opened in Adobe Acrobat
    							Pro. The Tags panel is visible, showing that the text   "Cooking
    							with butter" is now tagged as H2. </p>
    						<p><image><img source="working-examples/PDF9/cooking-headings3.gif" height="352" width="520"/><alt> PDF document opened in Adobe Acrobat. The TouchUp Reading Order panel shows the correctly tagged headings.</alt></image> </p>
    					</section>
    					<section>
    						<head> Using the Order and Tags panels </head>
    						<p>You can also add or change headings as follows: </p>
    						<olist><item><p> Bring up the Order panel. </p></item><item><p> Access the context menu for the text to be changed or added as
    							a heading. </p></item><item><p> Select the correct heading tag for the text. </p></item></olist>
    						<p>The following screenshot shows Order panel and the context menu for
    							the text "Cooking with butter." "Tag as heading 2" is
    							selected in the context menu. </p>
    						<p><image><img source="working-examples/PDF9/cooking-headings4.gif" height="637" width="649"/><alt> PDF document opened in Adobe Acrobat. The Order panel and context menu show the text to be changed to Heading 2.</alt></image> </p>
    						<p>You can then check that the correct heading is applied by opening
    							the Tags panel, as shown in the following screenshot. </p>
    						<p><image><img source="working-examples/PDF9/cooking-headings5.gif" height="319" width="480"/><alt> PDF document opened in Adobe Acrobat. The Tags panel confirms the correct heading tags.</alt></image> </p>
    						<p>This example is shown in operation in the <loc href="cooking.docx" linktype="examples">working example of adding tagged headings (Word file)</loc> and <loc href="cooking.pdf" linktype="examples">working example of adding tagged headings (PDF file)</loc>.</p>
    					</section>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating documents in Microsoft Word that have correctly
    				tagged headings when converted to PDF</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Use Styles to create heading formats: Heading 1, Heading 2, Heading
    						3, etc. Make styles progress in a logical manner; e.g., a Heading 2
    						should come after a Heading 1. </p>
    					<section>
    						<head>In Microsoft Word 2003 </head>
    						<ulist><item><p> Select the "Format &gt; Styles and Formatting" menu
    							item to reveal the styles and formatting task pane. </p></item><item><p> Use the Heading 1 to Heading 6 styles provided in the "Styles
    								and Formatting" panel. </p></item></ulist>
    						<p><image><img source="working-examples/PDF9/word2003.gif" height="288" width="500"/><alt>Selecting heading styles in Word 2003.</alt></image> </p>
    					</section>
    					<section>
    						<head>In Microsoft Word 2007/2010 </head>
    						<p>Select the Home Ribbon in Word 2007/2010 and select the appropriate
    							heading (Heading 1 to Heading 6) from the Styles group. </p>
    						<p><image><img source="working-examples/PDF9/word2007.gif" height="109" width="500"/><alt>Selecting heading styles in Word 2007/2010.</alt></image> </p>
    					</section>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating documents in OpenOffice.org Writer 2.2 that have
    				correctly tagged headings when converted to PDF</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Use Styles to create heading formats: Heading 1, Heading 2, Heading
    						3, etc. Make styles progress in a logical manner; e.g., a Heading 2
    						should come after a Heading 1. </p>
    					<p>Export to PDF as follows: </p>
    					<olist><item><p> From the File menu, select Export as PDF... </p></item><item><p> The first time you export as PDF, an Options Dialog appears. </p></item><item><p> Select Tagged PDF, then select Export. </p></item></olist>
    					<p><image><img source="working-examples/PDF9/openofficecooking.jpg" height="380" width="628"/><alt>Selecting heading styles and exporting to PDF in OpenOffice.org Writer.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking up headings using /Head<emph>n</emph> elements</head>
    				<description>
    					<p>Headings within PDF documents can be marked up using /Head<emph>n</emph> elements
    						in the structure tree, where <emph>n</emph> is numeral 1 through 6 (for
    						example /Head1, /Head2, etc.). </p>
    					<p>The following code fragment illustrates code that is typical for using
    						the /Head<emph>n</emph> elements to mark content. This is typically accomplished
    						by an authoring tool. </p>
    					<codeblock><![CDATA[0 obj% Document catalog
  << /Type /Catalog
     /Pages 100 0 R                  % Page tree
     /StructTreeRoot 300 0 R         % Structure tree root
  >>
endobj
 ...
300 0 obj% Structure tree root
  << /Type /StructTreeRoot
     /K [ 301 0 R                    % Two children: a chapter
        304 0 R                      % and a paragraph
        ]
     /RoleMap << /Chap /Sect         % Mapping to standard structure types
                 /Head1 /H
                 /Para /P
              >>
    /ClassMap << /Normal 305 0 R >>  % Class map containing one attribute class
    /ParentTree 400 0 R              % Number tree for parent elements
    /ParentTreeNextKey 2             % Next key to use in parent tree
    /IDTree 403 0 R                  % Name tree for element identifiers
  >>
endobj
301 0 obj                            % Structure element for a chapter
  << /Type /StructElem
     /S /Chap
     /ID (Chap1)                     % Element identifier
     /T (Chapter 1)                  % Human-readable title
     /P 300 0 R                      % Parent is the structure tree root
     /K [ 302 0 R                    % Two children: a section head
          303 0 R                    % and a paragraph
        ]
  >>
endobj
302 0 obj                            % Structure element for a section head
  << /Type /StructElem
     /S /Head1
     /ID (Sec1.1)                    % Element identifier
     /T (Section 1.1)                % Human-readable title
     /P 301 0 R                      % Parent is the chapter
     /Pg 101 1 R                     % Page containing content items
     /A << /O /Layout                % Attribute owned by Layout
           /SpaceAfter 25
           /SpaceBefore 0
           /TextIndent 12.5
        >>
    /K 0                             % Marked-content sequence 0
  >>
endobj
...
]]></codeblock>
    					<p>Within marked content containers, headings can be marked up using
    						/Head<emph>n</emph> elements as follows for a first-level heading in
    						a PDF document: </p>
    					<codeblock><![CDATA[BT		 		% Start of text object
  /Head1 <</MCID 0 >>   	% Start of marked-content sequence
     BDC
        ...
        (This is a first level heading. Hello world: ) Tj
        ...
     EMC			% End of marked-content sequence
     ...
ET				% End of text object
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8.4.3.2 (Paragraphlike Elements) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://pdf.editme.com/Headings">PDF
    						Standards: Headings</loc> </p></item><item><p> <loc href="http://accessdp.wordpress.com/fixing-pdfs-for-accessibility/headings/">PDF
    							Accessibility Documentation:headings</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G141"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p>For all PDF content that is divided into separate sections, use
    					one of the following to verify that headings are tagged correctly:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that the list of headings is announced correctly. </p></item><item><p> Using a PDF editor, 
    							make sure the headings are tagged correctly. </p></item><item><p> Use a tool that is capable of showing the /Head<emph>n</emph> entries
    								to open the PDF document and verify that headings are tagged
    								correctly. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API and verify that the headings are tagged correctly. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_headings_by_marking_content_with_heading_tags_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF10">
    		<short-name>Providing labels for interactive form controls in PDF documents</short-name>
    		<applicability>
    			<ulist><item><p> Tagged PDF documents with forms. </p></item><item><p> PDF forms created using Adobe LiveCycle Designer. </p></item></ulist>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    			<success-criterion idref="minimize-error-cues"/>
    			<success-criterion idref="ensure-compat-rsv"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to ensure that users of assistive
    				technology are able to perceive form control labels and understand
    				how form controls are used. </p>
    			<p>Form controls allow users to interact with a PDF document by filling
    				in information or indicating choices which can then be submitted for
    				processing. Assistive technology users must be able to recognize and
    				understand the form fields, make selections, and provide input to complete
    				the forms, and submit the form, just as sighted users can. Understandable
    				labels that convey the purpose of each form control are essential to
    				form accessibility. </p>
    			<p>Form inputs generally have labels and instructions to help users understand
    				what information is required and how to fill in the form. Unless these
    				labels are programmatically associated with the relevant fields, assistive
    				technology might not be able to associate them correctly, and thus
    				users might not understand how to complete the form. </p>
    			<p>Using Adobe Acrobat Pro with documents with interactive forms, you
    				can make sure that the forms are accessible and usable by making sure
    				that programmatically associated labels that convey the purpose of
    				the fields are provided. </p>
    			<p>The heuristics used by assistive technology will sometimes use the
    				text label if a programmatically associated label cannot be found.
    				The TU entry (which is the tooltip) of the
    				field dictionary is the programmatically
    				associated label (see Example
    				3 below and Table 220 in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    				1.7 (ISO 32000-1)</loc>). Therefore, add a tooltip to each field to provide
    				a label that assistive technology can interpret.</p>
    			<section id="PDF10_placement-rules">
    				<head>Placement rules</head>
    				<p>The table below lists the placement rules governing where Adobe LiveCycle
    					positions labels by default. Note that these rules assume left-to-right
    					text directionality. If your form requires different positioning (e.g.,
    					to accommodate PDF documents in languages that use right-to-left text
    					directionality), see <emph>Repositioning form labels</emph> in Example
    					2 below. In general, authors should review label positioning to make
    					sure it meets the requirements of their particular form. </p>
    				<table border="1" cellpadding="2"><tbody><tr valign="top"><th> Control Type </th><th> LiveCycle Placement Rules </th></tr><tr valign="top"><td><emph role="strong">Text input (including date/time and password fields)</emph> </td><td> Default placement for the label is to the left of the control.
    					If this is not possible, LiveCycle will attempt to place it
    					immediately above the control. </td></tr><tr valign="top"><td><emph role="strong">Checkbox</emph> </td><td> Default placement for the label is to the right of the check
    						box. </td></tr><tr valign="top"><td><emph role="strong">Radio button group</emph> </td><td> Default placement for the label for each individual radio
    							button is to the right of the button.
    							Create a visible caption for the radio button group by creating
    								static text and placing it to the left of or above the group.
    								(See <emph>Labeling radio buttons</emph> below.) </td></tr><tr valign="top"><td><emph role="strong">Combo box</emph> </td><td> Default placement for the label is to the left of the drop-down
    									list. If this is not possible, LiveCycle will attempt to place
    									it immediately above the control.. </td></tr><tr valign="top"><td><emph role="strong">List box</emph> </td><td>Default placement for the label is above the list box. </td></tr><tr valign="top"><td><emph role="strong">Button</emph> </td><td> LiveCycle automatically places the label on the button;
    										it does not have to be positioned manually. Ensure that the
    										button's purpose is properly described in the label text. </td></tr></tbody></table>
    			</section>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Providing labels using the Forms tool in Adobe Acrobat
    					9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>As noted in the Description, text labels added in an authoring tool
    						and then converted to PDF might be visually associated with the fields
    						but are not programmatically associated, and you should provide a tooltip. </p>
    					<olist><item><p> In the Forms menu, select Add or Edit Fields... </p></item><item><p> For the field you want to edit, access the context menu and select
    						the Properties dialog. </p></item><item><p> In the General tab of the Properties dialog, type a description
    							for the form field in the Tooltip field. </p></item><item><p> Repeat for all form fields. </p></item></olist>
    					<p>The following image shows the Properties dialog with a description
    						in the Tooltip field. </p>
    					<p><image><img source="working-examples/PDF10/form5.jpg" height="503" width="525"/><alt>The Properties dialog for a form field. A short description, including the format required for the field, is added and will appear as a tooltip.</alt></image>  </p>
    					<p>This example is shown in operation in the <loc href="form" linktype="examples">working example of providing labels using the forms tool</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Providing labels to form controls in Adobe LiveCycle Designer
    				ES 8.2.1</head>
    				<description>
<p>This example is shown with Adobe LiveCycle Designer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>LiveCycle Designer provides several options for associating descriptive
    					text and labels with form elements. </p>
    					<p>For sighted or low-vision users, it is important to properly position
    						the label adjacent to the control. For screen reader users, you should
    						also ensure that the label is programmatically associated with the
    						form control and that sufficient information is provided so that screen
    						reader users can readily complete and submit the form. </p>
    					<p>This example is shown in operation in the <loc href="form-lc" linktype="examples">working example of providing labels in LiveCycle Designer</loc>.</p>
    					<section>
    						<head>Specifying accessible label text using the accessibility palette</head>
    						<p>In LiveCycle Designer, create or import a form. Then: </p>
    						<olist><item><p> Enable the palette by selecting Window &gt; Accessibility or by
    							pressing shift + F6. </p></item><item><p> The palette appears in LiveCycle Designer's right-hand panel. </p></item><item><p> Select an object in your form. The palette shows the object's
    								accessibility properties. </p></item></olist>
    						<p><image><img source="working-examples/PDF10/access-palette-dropdown.jpg" height="574" width="284"/><alt>Image of Adobe LiveCycle Accessibility Palette showing the Precedence drop down list. Text is announced in the order shown in the list: custom text, tool tip, caption, and name.</alt></image> </p>
    						<p>The label that a screen reader uses does not necessarily have to be
    							the same as the visual caption. In some cases, you may want to provide
    							more information about a form element's purpose. </p>
    						<p>To specify what text should be announced by the screen reader for
    							a particular object, you can use the Accessibility Palette's Screen
    							Reader Precedence drop down list. Text is announced in the order shown
    							in the list: custom text, tool tip, caption, and name. </p>
    						<p>Depending on the complexity and difficulty of your form, you must
    							decide which option best suits the requirements for your form. </p>
    						<p>By default, a screen reader searches for an object's text in order
    							shown in the image. Once descriptive text has been found for a control,
    							the search stops. </p>
    						<p>The image below shows an example of a text field with a visual caption
    							that might be unclear for screen reader users. One of the fields has
    							a caption of "Date" but screen reader users may want to know
    							the preferred date format (shown as screen text). So this text is provided
    							in the tooltip. Because a tooltip has a higher precedence than the
    							visual caption, the screen reader uses the tooltip. </p>
    						<p><image><img source="working-examples/PDF10/livecycledatefield.jpg" height="101" width="592"/><alt>Image of a date form field in LiveCycle Designer showing tooltip text for a date format.</alt></image> </p>
    					</section>
    					<section>
    						<head>Labeling radio buttons</head>
    						<p>When a screen reader user tabs into a radio button, the screen reader
    							needs to announce two items: </p>
    						<ulist><item><p> A general description of the purpose of the <emph>group</emph> of
    							buttons </p></item><item><p> A meaningful description for the purpose of <emph>each</emph> radio
    								button </p></item></ulist>
    						<p>To make radio buttons accessible: </p>
    						<olist><item><p> In the Hierarchy palette, select the radio button group. </p></item><item><p> Select the Accessibility palette and in the Custom Screen Reader
    							Text box, type the speak text for the group. For example, type   "Select
    							a method of payment." </p></item><item><p> In the Hierarchy palette, select the first radio button in the
    								group. </p></item><item><p> In the Object palette, select the Field tab. In the Item area,
    									select the item and type a meaningful value for the selected radio
    									button. For example, type "Cash." </p></item><item><p> Repeat steps 3 and 4 for each radio button in the group. </p></item></olist>
    						<p><image><img source="working-examples/PDF10/radiobuttongroup.jpg" height="237" width="526"/><alt>Image of Custom Screen Reader Text for radio buttons in LiveCycle Designer.</alt></image> </p>
    					</section>
    					<section>
    						<head>Repositioning form labels</head>
    						<p>The placement of a caption, or label, is important because users expect
    							them to be found at a particular location adjacent to the control.
    							For screen magnification users this is even more important, as they
    							might not be able to view both the control and the label at the same
    							time. </p>
    						<p>When you create an object, Adobe LiveCycle Designer automatically
    							positions the label as specified by the control type (see the table
    							in the Description above). For example, for a text field, the label
    							is positioned to the left of the control. </p>
    						<p>If you need to change the position of the label text (for example,
    							to accommodate right-to-left text directionality): </p>
    						<olist><item><p> Select the object by moving the focus to it. </p></item><item><p> In the Layout palette, under Caption at the bottom of the palette,
    							select the position of your object from the Position drop-down list. </p></item></olist>
    						<p><image><img source="working-examples/PDF10/captionposition.jpg" height="291" width="305"/><alt>The Layout palette and the new Caption position.</alt></image> </p>
    						<p>The resulting repositioned label is shown below. The label for the
    							Date text field has been moved from the left of the field to the line
    							above the field. </p>
    						<p><image><img source="working-examples/PDF10/formlabeltop.jpg" height="148" width="505"/><alt>A form label repositioned above the field; also shown are default label positions to the left of text fields.</alt></image> </p>
    					</section>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a tooltip to interactive form controls</head>
    				<description>
    					<p>The following code fragment illustrates the use of the TU entry to
    						provide a tooltip (or programmatically associated text label) for a
    						form field. This is typically accomplished by an authoring tool. </p>
    					<codeblock><![CDATA[<< /AP -dict-                                                   
   /DA /Helv  0 Tf 0 g
   /DR -dict-
   /F 0x4
   /FT Tx              % FT key set to Tx for Text Field
   /P -dict-
   /Rect -array-
   /StructParent 0x1
   /Subtype Widget
   /T Date you are available   % Partial field name Date
   /TU Date you are available: use MM/DD/YYYY format % TU tool tip value serves as short description
   /Type Annot
   /V Pat Jones
>>
...
<Start Stream>
 BT
  /P <</MCID 0 >>BDC
  /CS0 cs 0  scn 
  /TT0 1 Tf
    -0.001 Tc 0.003 Tw 11.04 0 0 11.04 72 709.56 Tm
    [(P)-6(le)-3(as)10(e)-3( )11(P)-6(rin)2(t)-3( Y)8(o)-7(u)2(r N)4(a)11(m)-6(e)]TJ
  0 Tc 0 Tw 9.533 0 Td
  ( )Tj
  -0.004 Tc 0.004 Tw 0.217 0 Td
  [(\()-5(R)-4(e)5(q)-1(u)-1(i)-3(r)-3(e)-6(d)-1(\))]TJ
 EMC
  /P <</MCID 1 >>BDC
  0 Tc 0 Tw 4.283 0 Td
  [( )-2( )]TJ
   EMC
   /ArtifactSpan <</MCID 2 >>BDC
   0.002 Tc -0.002 Tw 0.456 0 Td
  [(__)11(___)11(___)11(___)11(___)11(_)11(____)11(___)11(___)11(__)]TJ
  0 Tc 0 Tw 13.391 0 Td
  ( )Tj
  EMC
 ET
<End Stream>
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/xml/index_arch.html">Adobe
    						XML Forms Architecture (XFA)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G131"/>
    			<relatedtech idref="G162"/>
    			<relatedtech idref="PDF23"/>
    			<relatedtech idref="PDF5"/>
    			<relatedtech idref="PDF22"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For each form control, verify visually that the label is positioned
    					correctly in relation to the control. </p></item><item><p> For each form control, verify that the name is programmatically
    						associated with the control by one of the following:</p>
    						<ulist><item><p> Open the PDF document with a tool that is capable of showing
    							the name associated with the control and verify that the name
    							is associated correctly with the control. </p></item><item><p> Use a tool that exposes the document through the accessibility
    								API, and verify that the name is associated correctly with the
    								control. </p></item></ulist>
    					</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 and #2 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_labels_for_interactive_form_controls_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF11">
    		<short-name>Providing links and link text using the /Link structure element in
    			PDF documents</short-name>
    		<applicability>
    			<p>PDF documents that contain links</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    			<success-criterion idref="keyboard-operation-keyboard-operable"/>
    			<success-criterion idref="keyboard-operation-all-funcs"/>
    			<success-criterion idref="navigation-mechanisms-refs"/>
    			<success-criterion idref="navigation-mechanisms-link"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The purpose of this technique is to show how link text in PDF documents
    				can be marked up to be recognizable by keyboard and assistive technology
    				users. That is, the link information is programmatically available
    				to user agents so that links are recognizable when presented in a different
    				format. This is typically accomplished by using a tool for authoring
    				PDF. </p>
    			<p>Links in PDF documents are represented by a Link tag and objects in
    				its sub-tree, consisting of a link object reference (or Link annotation)
    				and one or more text objects. The text object or objects inside the
    				Link tag are used by assistive technologies to provide a name for the
    				link. </p>
    			<p>The simplest way to provide links that comply with the WCAG success
    				criteria is to create them when authoring the document, before conversion
    				to PDF. </p>
    			<p>However, in some cases, it may not be possible to create the links
    				using the original authoring tool. In these cases, Adobe Acrobat Pro
    				can be used to create the link. But, because the tooltip created using
    				the Link dialog in Adobe Acrobat Pro is not accessible to screen readers,
    				be sure that the link text or the link context makes the purpose clear. </p>
    			<p>In all cases, link purpose should be made clear as described in the
    				general techniques: </p>
    			<ulist>
    				<item><p> <loc href="G53" linktype="techniques">G53:
    				Identifying the purpose of a link using link text combined with
    				the text of the enclosing sentence</loc> </p></item>
    				<item><p> <loc href="G91" linktype="techniques">G91:
    				Providing link text that describes the purpose of a link</loc> </p></item>
    			</ulist>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Creating a hyperlink in Microsoft Word 2007 before conversion
    					to PDF</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>To create a hyperlink in Microsoft Word, first locate the item (e.g.,
    						web page) to link to. Then: </p>
    					<olist><item><p> Either</p>
    						<ulist><item><p>Select Insert on the ribbon and select Hyperlink in the Links
    							tools </p></item><item><p>Or, use the CTRL+K keyboard shortcut </p></item></ulist>
    					</item><item><p> On the Insert Hyperlink dialog, add the link destination and link
    						text. </p></item><item><p> Save the file as tagged PDF. (See the <specref ref="pdf_notes"/>.) </p></item></olist>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating a hyperlink in OpenOffice.org Writer 2.2 before
    				conversion to PDF</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> On the Insert menu, select Hyperlink. </p></item><item><p> In the Hyperlink dialog, insert the target URI in the Target field
    						under Hyperlink Type. </p></item><item><p> Insert the link text in the Text field under Further Settings.
    							(You can also select the link text from the document text before
    							bringing up the dialog. The Text field will be filled in with the
    							selected text.) </p></item><item><p> Save the file as tagged PDF. (See the <specref ref="pdf_notes"/>.) </p></item></olist>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating a hyperlink using the Create Link dialog in Adobe
    				Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Select the text that will become the link text. </p></item><item><p> Access the context menu and select Create Link. </p></item></olist>
    					<p><image><img source="working-examples/PDF11/capelink1.jpg" height="467" width="424"/><alt>Image of a PDF document with text selected to create a hyperlink. The context menu shows Create Link selected.</alt></image> </p>
    					<p>3. Follow the instructions in the Create Link dialog to specify the
    						link appearance, as shown below. </p>
    					<p><image><img source="working-examples/PDF11/capelink2.jpg" height="406" width="509"/><alt>Image of a PDF document with the Create Link dialog open and link appearance options selected.</alt></image> </p>
    					<p>Then select Next and specify the URI. The image below shows the resulting
    						hyperlink and tooltip. </p>
    					<p><image><img source="working-examples/PDF11/capelink3.jpg" height="216" width="460"/><alt>Image of a PDF document with a hyperlink created using the Create Link dialog, including the resulting tooltip on mouseover.</alt></image></p>
    					<p>This example is shown in operation in the <loc href="links.pdf" linktype="examples">working example of creating a hyperlink in PDF</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking up link text using a /Link structure element</head>
    				<description>
    					<p>Link annotations in PDF documents are associated with a geometric
    						region of a page rather than a particular object in a content stream.
    						For this reason, link annotations alone are not useful for users with
    						visual impairments, or to applications that must determine which content
    						can be activated to invoke a hypertext link. </p>
    					<p>Tagged PDF /Link elements use PDF's logical structure to establish
    						the association between content items and link annotations, providing
    						functionality comparable to HTML hypertext links. </p>
    					<p>In HTML, the following example produces text containing a hypertext
    						link: </p>
    					<codeblock><![CDATA[Here is some text <a href="http://www.w3.org/WAI/"> with a link </a> inside.
]]></codeblock>
    					<p>In PDF the page must be painted first and then a link annotation
    						placed over the area where the object action will occur. </p>
    					<p>The following code fragment shows PDF equivalent to the HTML above;
    						it uses link text displayed in blue and underlined. A second code fragment
    						follows, indicating the associated logical structure hierarchy. This
    						is typically accomplished by an authoring tool. </p>
    					<codeblock><![CDATA[ /P <</MCID 0>>                                                %Marked Content Sequence 0 (paragraph)
  BDC                                                          %Begin marked content sequence
   BT                                                          %Begin text object
    /F1 11.04 Tf                                               %set text font and size
    1 0 0 1 72.024 709.54 Tm                                   %set text matrix
    0 g                                                        %set non stroking color to black
    0 G                                                        %set stroke color to black
   [(H)3(ere )-4(is s)10(o)5(m)-4(e)9( t)-3(e)9(xt)-3( )] TJ   %Show text preceding the link" Here is some text"
   ET                                                          %end text object
  EMC                                                          %end marked content sequence
 
 /Span <</MCID 1>>                                             %Marked Content Sequence 1 (underlined link text)
  BDC                                                          %Begin marked content sequence
   BT                                                          %Begin text object
    1 0 0 1 152.42 709.54 Tm                                   %set text matrix
    0 0 1 rg                                                   %set non-stroking color to blue
    0 0 1 RG                                                   %set stroke color to blue
    [(with a )-2(li)3(n)14(k)] TJ                              %Show link text " with a link"
   ET                                                          %end text object
    0 0 1 rg                                                   %set stroke color to blue
    152.42 707.62 45.984 0.72 re                               %rectangle operator - target area for the link
    f*                                                         %fill the path using the even-odd rule
  EMC                                                          %end marked content sequence
 
 /P <</MCID 2>>                                                %Marked Content Sequence 2 (paragraph)
  BDC                                                          %Begin marked content sequence
   BT                                                          %begin text object
    1 0 0 1 198.41 709.54 Tm                                   %set text matrix                                            
    0 g                                                        %set non stroking color to black
    0 G                                                        %set stroke color to black
    [( )] TJ                                                   %empty text string showing white space
   ET                                                          %end text object
   BT                                                          %begin text object
    1 0 0 1 200.93 709.54 Tm                                   %set text matrix
    [(in)5(sid)5(e.)] TJ                                       %show text following the link "inside."
   ET                                                          %end text
   BT                                                          %begin text object
    1 0 0 1 229.97 709.54 Tm                                   %set text matrix
    [( )] TJ                                                   %empty text string showing white space
   ET                                                          %end text object
  EMC                                                          %end marked content sequence 
  ]]></codeblock>
    					<p> The following code fragment is an excerpt from the logical structure
    						that establishes the association between the content items and the
    						link annotation: </p>
    					<codeblock><![CDATA[ 11 0 obj                                              %Object ID 11, generation   0, obj keyword
  <</K[1                                               %immediate child of the structure tree root
   <<
    /Obj 26 0 R                                        %reference to Object 26
    /Type/OBJR                                         %this object describes an indirect object reference
   >>]
    /P 12 0 R
    /Pg 17 0 R
    /S/Link
  >>
 endobj
 
 26 0 obj                                              %object ID 26 which is referenced by the OBJR in Object 11
  <</A 31 0 R
   /BS
   <</S/S
     /Type/Border
     /W 0
   >>
   /Border[0 0 0]                                      %a colorless border
   /H/I
   /Rect[150.128 694.558 200.551 720.0]                %the boundaries defining target area where link annotation is active
   /StructParent 1
   /Type/Annot                                         %Structure element is an annotation
   /Subtype/Link
  >>                                                   %It is a link annotation                                                 
 endobj     
 31 0 obj                                              %Object 31, gen 0, obj
  <</S/URI                                             %Object type is URI action
    /URI(http://www.w3.org/WAI)                        %The Uniform resource identifier to resolve
  >>   
 endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8.4.4.2 (Link Elements) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G53"/>
    			<relatedtech idref="G91"/>
    			<relatedtech idref="PDF13"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<p>For each hyperlink, verify that the link is correctly tagged and the
    					link text is properly exposed: </p>
    				<olist><item><p> Read the PDF document with a screen reader, listening to hear
    					that the link is read correctly and that it describes the purpose
    					of the link (i.e., its destination). </p></item><item><p> Visually scan the tag tree to verify that the link is tagged correctly
    						and the link text is exposed (for screen magnifier users and sighted
    						users with cognitive disabilities). </p></item><item><p> Use a tool that is capable of showing the /Link entry value to
    							open the PDF document and view the hyperlink and link text. </p></item><item><p> Use a tool that exposes the document through the accessibility
    								API and verify that the link has the correct link text. </p></item><item><p> Tab to each link and check that it can be followed to its target
    									by pressing Enter. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist>
    					<item><p>#1 or #2 or #3 or #4 is true.</p></item>
    					<item><p>#5 is true.</p></item>
    				</ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_links_and_link_text_using_the_/Link_structure_element_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF12">
    		<short-name>Providing name, role, value information for form fields in PDF documents</short-name>
    		<applicability>
    			<p>Tagged PDF documents with interactive form fields. </p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    			<success-criterion idref="ensure-compat-rsv"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to ensure that assistive technologies
    				can gather information about and interact with form controls in PDF
    				content. </p>
    			<p>The types of PDF form controls are: text input field, check box, radio
    				button, combo box, list box, and button. </p>
    			<p>Providing name, role, state, and value information for all form components
    				enables compatibility with assistive technology, such as screen readers,
    				screen magnifiers, and speech recognition software used by people with
    				disabilities. </p>
    			<p>The PDF specification defines how name, role, and value are set for
    				form controls in Section 12.7.4 (Field Types) of <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc>, as shown in the following table. The Comments column explains how Adobe Acrobat Pro displays the corresponding information. </p>
    			<table border="1"><tbody><tr><th scope="col">Interactive Form Dictionary Entries</th><th scope="col">Used to Define</th><th scope="col">Comments</th></tr><tr><th scope="row">FT</th><td>Role</td><td>Controls that share field type also use field flags to set
    				the appropriate role. In Adobe Acrobat the role for form controls
    				is set automatically.</td></tr><tr><th scope="row">TU</th><td>Name</td><td>In Adobe Acrobat the TU entry value is provided via the Tooltip
    					field in the form control's Properties dialog. This should
    					not be confused with the T entry which is defined as the Name
    					in Acrobat's form control properties dialog - the name field
    					in the Properties dialog is not used to provide the name for
    					a control when read by assistive technologies.</td></tr><tr><th scope="row">CA</th><td>Name (Pushbuttons only)</td><td>In Adobe Acrobat the CA entry value is provided via the label
    						field in the form control's Properties dialog.</td></tr><tr><th scope="row">V</th><td>Value</td><td>The Value entry is set by the user interacting with the control,
    							where a value is needed.</td></tr><tr><th scope="row">DV</th><td>Default Value</td><td>In Adobe Acrobat the DV entry value can be set in the form
    								control's Properties dialog.</td></tr></tbody></table>
    			<p>The following table describes how the role, name, value, and state
    				are defined for PDF form controls created using Adobe Acrobat Pro.
    				Adobe LiveCycle Designer provides the same controls as well as several
    				additional ones: see Example 2 below. </p>
    			<table border="1"><tbody><tr valign="top"><th>PDF form element </th><th>Role (FT entry)</th><th> Name (TU entry)</th><th>Value (V entry)</th><th>Configurable States</th></tr><tr valign="top"><td>Text field</td><td>Text 
    				<code>/Tx</code></td><td>Tooltip</td><td>Default value (DV entry in field dictionary) can be set in
    					the Properties dialog. Value is entered by user.</td><td>Read Only, Required, Multiline, Password</td></tr><tr valign="top"><td>Check box</td><td>Check box 
    						<code>/Btn</code></td><td>Tooltip</td><td>V entry is set to 'Yes' or 'No' depending on Checked state.</td><td>Read Only, Required, Checked</td></tr><tr valign="top"><td>Radio button</td><td>Radio button
    							<code>/Btn</code> (Field Flag set to 'Radio')</td><td>Tooltip</td><td>V entry is set to 'Yes' or 'No' depending on Checked state.</td><td>Read Only, Required, Checked</td></tr><tr valign="top"><td>Combo box</td><td>Combo box
    								<code>/Ch</code> (Field Flag set to 'Combo') </td><td>Tooltip</td><td>Default value (/DV) can be set in the Properties dialog.
    									Value is determined by user selection.</td><td>Read Only, Required</td></tr><tr valign="top"><td>List box</td><td>Drop-down list
    										<code>/Ch</code> </td><td>Tooltip</td><td>Default value (/DV) can be set in the Properties dialog.
    											Value is determined by user selection.</td><td>Read Only, Required</td></tr><tr valign="top"><td>Button</td><td>Push button
    												<code>/Btn</code> (Field Flag set to 'Pushbutton')</td><td>Label (CA entry instead of TU entry)</td><td>Push buttons do not have or require a value.</td><td>Read Only, Required</td></tr><tr valign="top"><td>Signature field</td><td>Text
    													<code>/Sig</code></td><td>Tooltip</td><td>Default value (DV entry in field dictionary) can be set in
    														the Properties dialog. Value is entered by user.</td><td>Read Only, Required</td></tr></tbody></table>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Specifying name, role, value and/or state for a form field
    					using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>This example uses a check box for illustration; the procedure is the
    						same for other form controls. In Form Editing mode: </p>
    					<olist><item><p> Access the context menu for the form field you are creating or
    						modifying. </p></item><item><p> Select the Properties... dialog for the form field. </p></item><item><p> Specify the name by adding a value to the tool tip field. This
    							will used by the accessibility API as the Name for the control and
    							should usually be set to match the text used as a visual label for
    							the control. </p></item><item><p> Select the Options tab. </p></item><item><p> Specify the default value and the default state, if appropriate. </p></item></olist>
    					<p>The image below shows the Check Box Properties dialog, open in the
    						General tab. (The Name field in the dialog is not needed for accessibility.) </p>
    					<p><image><img source="working-examples/PDF12/nrv1.jpg" height="345" width="427"/><alt>General tab on the Check Box Properties dialog, showing name and tool tip fields for a check box</alt></image> </p>
    					<p>The image below shows the Check Box Properties dialog, open in the
    						Options tab. </p>
    					<p><image><img source="working-examples/PDF12/nrv2.jpg" height="388" width="348"/><alt>Options tab on the Check Box Properties dialog, showing value and state fields for a check box.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="form.pdf" linktype="examples">working example of specifying name, role, value using Acrobat Pro</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Specifying name, value, and state for a form field using
    				Adobe LiveCycle Designer ES 8.2.1</head>
    				<description>
<p>This example is shown with Adobe LiveCycle Designer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>In Adobe LiveCycle Designer, you use the Object Library to create
    						form objects and the Object Palette to specify name, role, state or
    						value for the object. </p>
    					<p>The following image shows the Object Palette. </p>
    					<p><image><img source="working-examples/PDF12/lc-objlib.jpg" height="226" width="611"/><alt>LiveCycle Designer Object Library showing the form objects available for form creation.</alt></image> </p>
    					<p>The following three images show the tabs in the Object palette. In
    						the first the Field tab is open for specifying the type (or role) of
    						the field. </p>
    					<p><image><img source="working-examples/PDF12/lc-objpal-t.jpg" height="362" width="252"/><alt>LiveCycle Designer Object palette, Field tab.</alt></image> </p>
    					<p>The next image shows the Value tab, with options that can be applied
    						to the field. </p>
    					<p><image><img source="working-examples/PDF12/lc-objpal-v.jpg" height="269" width="242"/><alt>LiveCycle Designer Object palette, Value tab options.</alt></image> </p>
    					<p>The third images shows the Binding tab, specifying the name of the
    						field. </p>
    					<p><image><img source="working-examples/PDF12/lc-objpal-b.jpg" height="352" width="253"/><alt>LiveCycle Designer Object palette, Binding tab.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="form-lc.pdf" linktype="examples">working example of specifying name, role, value using LiveCycle Designer</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a checkbox in a PDF document using the /Btn field
    				type</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for a
    						simple check box field such as shown in Examples 1 and 2. This is typically
    						accomplished by an authoring tool. </p>
    					<codeblock><![CDATA[1 0 obj
  << /FT /Btn     % Role
     /TU Retiree  % Name
     /V /Yes      % Value
     /AS /Yes
     /AP << /N << /Yes 2 0 R /Off 3 0 R>>
  >>
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 12.7.4 (Field Types) of <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/xml/index_arch.html">Adobe
    						XML Forms Architecture (XFA)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="PDF23"/>
    			<relatedtech idref="PDF5"/>
    			<relatedtech idref="PDF22"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For the form control, verify that name, role, and value/state
    					are specified by one of the following:</p>
    					<ulist><item><p> Use a screen reader to navigate to the form control and check
    						that it can be activated or that its value can be changed. Verify
    						that the name (tooltip) and role are announced. </p></item><item><p> Use a tool capable of showing the form field information to open the PDF document and verify that the form control has the correct name, role, value, and state (if appropriate) information.</p></item><item><p> Use a tool that exposes the document through the accessibility
    								API, and verify that the form control has the correct name, role,
    								value, and state (if appropriate) information. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_name,_role,_value_information_for_form_fields_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF13">
    		<short-name>Providing replacement text using the /Alt entry for links in PDF
    			documents</short-name>
    		<applicability>
    			<p>Tagged PDF documents that contain links. </p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="navigation-mechanisms-refs"/>
    			<success-criterion idref="navigation-mechanisms-link"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to provide replacement link text
    				via the /Alt entry in the property list for a tag. This is usually
    				not necessary, but in some situations, additional information beyond
    				the visible link text is needed, particularly for screen reader users.
    				Screen readers can read visible link text, but replacing the screen
    				text with meaningful alternate text for links in a PDF document can
    				make links more accessible. </p>
    			<p>Links in PDF documents are represented by a Link tag and objects in
    				its sub-tree, consisting of a link object reference (or Link annotation)
    				and one or more text objects. The text object or objects inside the
    				Link tag are used by assistive technologies to provide a name for the
    				link. </p>
    			<p>Authors can replace the default link text by providing an /Alt entry
    				for the Link tag. When the Link tag has an /Alt entry, screen readers
    				ignore the value of any visible text objects in the Link tag and use
    				the /Alt entry value for the link text. </p>
    			<p>The simplest way to provide context-independent link text that complies
    				with the WCAG 2.0 success criteria is to create them when authoring
    				the document, before conversion to PDF. In some cases, it may not be
    				possible to create the links using the original authoring tool. When editing PDF documents with Adobe Acrobat Pro, the best way to create accessible links is to use the Create Link command.</p>
    			<p>Authors should make sure that the alternate text makes sense in context
    				of the screen text before and after the link. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding alternate link text using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>The image below shows a document converted to PDF from Oracle Open
    						Office. Note that the visible link text is the URL for the link target.
    						A screen reader will read the entire URI as the link text. </p>
    					<p><image><img source="working-examples/PDF13/link-alt1.jpg" height="165" width="550"/><alt>A document with the link URI as the link text.</alt></image> </p>
    					<p>To create more accessible link text for assistive technology: </p>
    					<olist><item><p> In the View menu, open the Tag panel by selecting Navigation Panels &gt; Tags. </p></item><item><p> Locate the Link tag in the tag tree, access the context menu for
    						the link, and select Properties. </p></item><item><p> In the TouchUp Properties dialog, in the Tags tab, enter replacement
    							text in the Alternate Text field. Screen readers will read this text
    							instead of the entire URI. </p></item></olist>
    					<p>The next image shows the Link tag structure in the Tag panel. </p>
    					<p><image><img source="working-examples/PDF13/link-alt2.jpg" height="400" width="577"/><alt>The Link tag structure in the tag panel.</alt></image> </p>
    					<p>The last image shows the Alternate Text specified in the Link tag's
    						TouchUp Properties dialog. A screen reader will read the Alternate
    						Text as the link text. </p>
    					<p><image><img source="working-examples/PDF13/link-alt3.jpg" height="479" width="784"/><alt>The new Alternate Text: 'Boston Globe technology page'</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="link-text.odt" linktype="examples">working example of adding alternate link text (OpenOffice file)</loc> and <loc href="link-text-oo.pdf" linktype="examples">working example of adding alternate link text (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding alternate link text in a PDF document using the
    				/Alt entry</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for alternative
    					text for a link. This is typically accomplished by an authoring tool. </p>
    					<codeblock><![CDATA[32 0 obj
<<
  /S/URI                                       %Action type (required), must be URI for a URI action
  /URI(http://www.boston.com/business/technology/)  %Uniform resource identifier(required), the URI to be resolved
>>
endobj
]]></codeblock>
    					<p>The following illustrates how to specify alternate text for the
    					URL in the above link: </p>
    					<codeblock><![CDATA[11 0 obj
<<
  /Alt(Boston Globe technology page)    %Alternate text entry
  /K [ 1                                                      
       <<
         /Obj 27 0 R
         /Type /OBJR            %Object reference to the link
       >>
       ]                       
  /P 12 0 R
  /Pg 18 0 R
  /S
  /Link
>>
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.9.4 (Replacement Text) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G53"/>
    			<relatedtech idref="G91"/>
    			<relatedtech idref="G149"/>
    			<relatedtech idref="PDF11"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For the hyperlink, verify that the alternate link text is properly
    					coded by one of the following:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that the alternate link text is read correctly. </p></item><item><p> Use a tool that is capable of showing the /Alt entry to open
    							the PDF document and view the hyperlink and alternate link text. </p></item><item><p> Use a tool that exposes the document through the accessibility
    								API and verify that the alternate link text is the text for the
    								link. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_replacement_text_using_the_/Alt_entry_for_links_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF14">
    		<short-name>Providing running headers and footers in PDF documents</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="navigation-mechanisms-location"/>
    			<success-criterion idref="consistent-behavior-consistent-locations"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to help users locate themselves
    				in a document by providing running headers and footers via pagination
    				artifacts. This is normally accomplished using a tool for authoring
    				PDF. </p>
    			<p>Running headers and footers help make content easier to use and understandable
    				by providing repeated information in a consistent and predictable way.
    				The content of headers and footers will vary widely depending on the
    				document scope and content, the audience, and design decisions. Some
    				examples of location information that may be used in headers and footers
    				are listed below. Whether the information appears in a header or a
    				footer is often a design decision; page numbers often appear in footers
    				but they may alternatively appear in headers. </p>
    			<ulist>
    				<item><p> Document title </p></item>
    				<item><p> Current chapter and/or section in the document</p></item>
    			<item><p> Page numbers with location information such as, "Page 3-4" or "Page
    				9 of 15." </p></item>
    			<item><p> Author and/or date information. </p></item>
    			</ulist>
    			<p>Consistency helps users with cognitive limitations, screen-reader
    				users and low-vision magnifier users, and users with intellectual disabilities
    				understand content more readily. </p>
    			<p>The easiest way to provide page headers and footers is in the authoring
    				tool for the document. Authoring tools typically provide features for
    				creating header and footer text and information (such as page numbers).
    				However, if after converting your document to PDF, you need to add
    				or modify page headers and footers, authoring or repair tools like Adobe Acrobat Pro's Header &amp; Footer
    				tools can be used. In all cases, the tools generate page headers and
    				footers in consistent and predictable layout, format, and text. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding running headers and footers using Microsoft Word
    					2007</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>In Microsoft Word, use the Insert ribbon, which allows you to specify
    						header, footer, and page number information and layout, as shown in
    						the following images. </p>
    					<p><image><img source="working-examples/PDF14/word-headerfootertools.jpg" height="92" width="166"/><alt>Header and Footer tools on the Word Insert ribbon.</alt></image> </p>
    					<p>You can use these tools to specify headers and footers as shown in
    						the following images: </p>
    					<p><image><img source="working-examples/PDF14/header-word.jpg" height="208" width="815"/><alt>Page headers in a Word document.</alt></image>  </p>
    					<p><image><img source="working-examples/PDF14/footer-word.jpg" height="121" width="815"/><alt>Page footers in a Word document.</alt></image>  </p>
    					<p>When converted to PDF, the page headers and footers appear in the
    						document. </p>
    					<p><image><img source="working-examples/PDF14/pdf-page-header.jpg" height="175" width="700"/><alt>Page headers converted from Word.</alt></image>  </p>
    					<p><image><img source="working-examples/PDF14/pdf-page-footer.jpg" height="97" width="700"/><alt>Page footers converted from Word.</alt></image>  </p>
    					<p>This example is shown in operation in the <loc href="headers-footers.docx" linktype="examples">working example of adding running headers using Word (Word file)</loc> and <loc href="headers-footers-word.pdf" linktype="examples">working example of adding running headers using Word (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding running headers and footers using OpenOffice.org
    				Writer 2.2</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>In OpenOffice.org Writer, use the Insert &gt; Header and Insert &gt;   Footer
    						tools, which allow you to specify header and footer information and
    						layout, as shown in the following images. </p>
    					<p><image><img source="working-examples/PDF14/ooheaderfootertools.jpg" height="256" width="420"/><alt>Header and Footer tools in OpenOffice.org Writer.</alt></image> </p>
    					<p><image><img source="working-examples/PDF14/header-oo.jpg" height="170" width="612"/><alt>Page headers in an OpenOffice.org Writer document.</alt></image>  </p>
    					<p><image><img source="working-examples/PDF14/footer-oo.jpg" height="115" width="612"/><alt>Page footers in an OpenOffice.org Writer document.</alt></image>  </p>
    					<p>When converted to PDF, the page headers and footers appear in the
    					document as they do in the converted Word document in Example 1. </p>
    					<p>This example is shown in operation in the <loc href="headers-footers.odt" linktype="examples">working example of adding running headers using OpenOffice Writer (OpenOffice file)</loc> and <loc href="headers-footers-oo.pdf" linktype="examples">working example of adding running headers using OpenOffice Writer (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding running headers and footers to PDF documents using
    				Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>In Adobe Acrobat Pro, you can add or modify headers and footers: </p>
    					<olist><item><p> Select Document &gt; Header &amp; Footer &gt; Add... </p></item><item><p> In the Add Header and Footer tool, specify text and formats for
    						headers and footers in your document. </p></item><item><p> Use the Previews to make sure the text, fonts, and layout are
    							as you want them for your document. </p></item></olist>
    					<p>The image below shows Acrobat Pro's Add Header and Footer tool. </p>
    					<p><image><img source="working-examples/PDF14/pro-header-footer-tool.jpg" height="716" width="813"/><alt>Add Header and Footer tool in Adobe Acrobat Pro</alt></image>  </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking a running header or footer as a pagination artifact
    				in a PDF document using an /Artifact tag or property list</head>
    				<description>
    					<p>The PDF specification allows running headers and footers to be marked
    						as "pagination artifacts" as defined in section 14.8.2.2 "Real
    						Content and Artifacts," of <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    							1.7 (ISO 32000-1)</loc>. </p>
    					<p>An artifact is explicitly distinguished from real content by enclosing
    					it in a marked-content sequence with the /Artifact tag. </p>
    					<codeblock><![CDATA[/Artifact
BMC
...
EMC
]]></codeblock>
    					<p>or</p>
    					<codeblock><![CDATA[/Artifact propertyList
BDC
...
EMC
]]></codeblock>
    					<p>The first is used to identify a generic artifact; the second is
    						used for artifacts that have an associated property list. Note: to
    						aid in text reflow, artifacts should be defined with property lists
    						whenever possible. Artifacts lacking a specified bounding box are
    						likely to be discarded during reflow. </p>
    					<p>Property list entries for artifacts include Type, BBox, Attached,
    						and Subtype. </p>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8.2.2 (Real Content and Artifacts) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    			1.7 (ISO 32000-1)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G61"/>
    			<relatedtech idref="PDF9"/>
    			<relatedtech idref="PDF2"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> Check that running headers and/or footers are provided and contain
    					information to help users locate themselves within the document (such
    					as page numbers or chapter numbers). </p></item><item><p> If section headers are used in the running header or footer, check
    						that the section header and the running header or footer are consistent. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 and #2 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_running_headers_and_footers_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF15">
    		<short-name>Providing submit buttons with the submit-form action in PDF forms</short-name>
    		<applicability>
    			<p>Tagged PDF documents with forms. </p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="consistent-behavior-unpredictable-change"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to provide a mechanism that allows
    				users to explicitly request a change of context using the submit-form
    				action in a PDF form. The intended use of a submit button is to generate
    				an HTTP request that submits data entered in a form, so it is an appropriate
    				control to use for causing a change of context. In PDF documents, submit buttons are normally implemented using a tool for authoring PDF. </p>
<p>Examples 1 and 2 demonstrate how to add a submit button using specific
authoring tools. There are other PDF tools that perform similar
functions. Check the functionality provided by <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding a submit button using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> From the toolbar, select Forms &gt; Form Tools &gt; Button and
    						create a button on the form. </p></item><item><p> Access the context menu for the button and select Properties...
    							to open the Button Properties dialog. </p></item><item><p> In the General tab, provide a tooltip for the button. </p></item><item><p> In the Options tab, choose an option in the Layout menu for the
    								button label, icon image, or both. Then, type text in the Label box
    								to identify the button as a submit button and/or click Choose Icon
    								and locate the image file you want to use. </p></item><item><p> In the Actions tab:</p>
    									<ulist><item><p> For Select Trigger, choose Mouse Up. (The Mouse Up event is
    										keyboard accessible and, in addition, ensures that the button
    										will not change context unexpectedly, as it might with, e.g.,
    										a Mouse Enter event.) </p></item><item><p> For Select Action, choose Submit A Form. </p></item><item><p> Click Add. </p></item></ulist>
    								</item><item><p> In the Add dialog, enter a URL to collect data on a server or
    									collect form data as e-mail attachments. </p></item></olist>
    					<p>The following image shows the Options tab on the Button Properties
    						dialog. </p>
    					<p><image><img source="working-examples/PDF15/submit-button2.jpg" height="481" width="562"/><alt>The Options tab in the Button Properties dialog, showing the layout and label button properties.</alt></image> </p>
    					<p>The following image shows the Actions tab on the Button Properties
    						dialog. </p>
    					<p><image><img source="working-examples/PDF15/submit-button.jpg" height="570" width="560"/><alt>The Action tab in the Button Properties dialog with the Select Action option specified.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a submit button using Adobe LiveCycle Designer
    				ES 8.2.1</head>
    				<description>
<p>This example is shown with Adobe LiveCycle Designer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> On the Insert &gt; Standard menu, select the HTTP Submit Button
    						item. </p></item><item><p> On the Object panel for the HTTP Submit Button, insert the URL
    							for form-submission processing. </p></item></olist>
    					<p>The following image shows the Standard menu with the list of form
    						controls. </p>
    					<p><image><img source="working-examples/PDF15/http.gif" height="257" width="399"/><alt>The Standard menu showing the list of form controls, including the selection of the HTTP Submit Button.</alt></image> </p>
    					<p>The following image shows the Object panel with the URL and other
    						fields for button appearance. </p>
    					<p><image><img source="working-examples/PDF15/submit-panel.gif" height="287" width="239"/><alt>The Object panel showing the URL and other fields for specifying the submit button's appearance and action.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a script action to a submit button in a PDF document
    				using JavaScript</head>
    				<description>
    					<p>The following JavaScript code illustrates the use of a script to specify
    						the submit-form action. To add this script to the form field: </p>
    					<olist><item><p> Open the Button Properties dialog, as shown in Example 1, and
    						select the Actions tab </p></item><item><p> Select Run a JavaScript from the drop-down list, and select the
    							Add button </p></item><item><p> Enter JavaScript code in the JavaScript Editor dialog, for example: </p></item></olist>
    					<codeblock><![CDATA[var aSubmitFields = new Array( "name", "id", "juser" );
this.submitForm({
  cURL: "http://www.example.com/cgi-bin/myscript.cgi#FDF",
  aFields: aSubmitFields,
  cSubmitAs: "FDF" // the default, not needed here
});
]]></codeblock>
    					<p>The following images illustrate this process: </p>
    					<p><image><img source="working-examples/PDF15/submit-button1.jpg" height="552" width="587"/><alt>The Button Properties dialog for a submit button.</alt></image> </p>
    					<p><image><img source="working-examples/PDF15/submit-button3.jpg" height="443" width="518"/><alt>The JavaScript added to the Action tab of the Button Properties dialog.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="submit-button-js.pdf" linktype="examples">working example of adding a script action to a submit button</loc>.</p>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 12.7.5.2 (Submit-Form Action) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://kb2.adobe.com/cps/332/332289.html">Create
    						submission forms in LiveCycle Designer</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/en/xml/xfa_spec_2_5.pdf">XML
    							Forms Architecture (XFA) Specification Version 2.5</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G80"/>
    			<relatedtech idref="PDF23"/>
    			<relatedtech idref="PDF12"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For each page that submits a form, visually verify that the form
    					contains a submit button and check one of the following:</p>
    					<ulist><item><p> Tab to the button and check that it submits the form in response
    						to user action to select the button. </p></item>
<item><p> Open the PDF document with a tool that is capable of showing
    								the submit-form action and check that the button action is to
    								submit the form. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true for each page that contains a form. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_submit_buttons_with_the_submit-form_action_in_PDF_forms"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF16">
    		<short-name>Setting the default language using the /Lang entry in the document
    			catalog of a PDF document</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="meaning-doc-lang-id"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to specify a document's default
    				language by setting the /Lang entry in the document catalog. This is
    				normally accomplished using a tool for authoring PDF. </p>
    			<p>Both assistive technologies and conventional user agents can render
    				text more accurately when the language of the document is identified.
    				Screen readers can load the correct pronunciation rules. Visual browsers
    				can display characters and scripts correctly. Media players can show
    				captions correctly. As a result, users with disabilities are better
    				able to understand the content. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding a /Lang entry to specify the default document language
    					using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Open the document in Adobe Acrobat Pro </p></item><item><p> From the File menu, select "Properties..." </p></item><item><p> In the "Properties" dialog, select the "Advanced" tab </p></item><item><p> In the "Reading Options" field, select the default language
    						from the "Language" combo box </p></item></olist>
    					<p><image><img source="working-examples/PDF16/docprop.gif" height="322" width="263"/><alt>Specifying the default language in Adobe Acrobat's Properties dialog.</alt></image> </p>
    					<note><p>Acrobat includes 16 preset language selections.
    						If you need to specify a language that is not on the list, such as
    						Russian, you must type the ISO 639 code for the language, not its name. </p></note>
    					<p>This example is shown in operation in the <loc href="language-en.pdf" linktype="examples">working example of adding a /Lang entry using Acrobat Pro</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Specifying the default document language in a PDF document
    				using Microsoft Word 2007</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Documents authored in Microsoft Word: "In some instances, even
    						if the document language has been specified in the source file, the
    						information about document language is not conveyed to the PDFMaker.
    						Setting the language for an entire document in the Document Properties
    						dialog box [see Example 1] corrects all errors related to this option."(<loc href="http://www.adobe.com/accessibility/products/acrobat/pdf/A9-accessible-pdf-from-word.pdf">Adobe®
    							Acrobat® 9 Pro Accessibility Guide: Creating Accessible PDF from Microsoft®
    							Word</loc>) </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Specifying the default document language in a PDF document
    				using a /Lang entry</head>
    				<description>
    					<p>The natural language used for text in a document is determined in
    						a hierarchical fashion, based on whether an optional /Lang entry is
    						present in any of several possible locations. At the highest level,
    						the document's default language may be specified by a /Lang entry in
    						the document catalog. </p>
    					<p>The following code fragment illustrates code that is typical for using
    						the /Lang entry in the document catalog for a document's default language
    						(in this case, US English). (This is typically accomplished by an authoring
    						tool.) </p>
    					<codeblock><![CDATA[ 1 0 obj
   << /Type /Catalog
      ...
      /Lang (en-US)
      ...
   >> 
 endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.9.2 (Natural Language Specification) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://www.loc.gov/standards/iso639-2/php/code_list.php">ISO
    						639-2 Codes</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/en/pdf/PDFReference16.pdf#page=886">PDF
    							Reference 1.6, 10.8.1 Natural Language Specification (PDF 8.7 Mb)</loc> </p></item><item><p> <loc href="http://pdf.editme.com/pdfua-naturalLanguageSpecification">PDF
    								Standards: Natural Language Specification</loc> </p></item><item><p> <loc href="http://www.adobe.com/accessibility/products/acrobat/pdf/A9-accessible-pdf-from-word.pdf">Adobe®
    									Acrobat® 9 Pro Accessibility Guide: Creating Accessible PDF from
    									Microsoft® Word</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="PDF19"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p>Verify that the default language for the document is correctly
    					specified by applying one of the following:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that the text is read in the correct natural language. </p></item><item><p> Using a PDF editor, check that the language is
    							set to the default document language. </p></item><item><p> Use a tool which is capable of showing the /Lang entry value
    								in the document catalog to open the PDF document and view the
    								language settings. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API and verify that the language is set to the default language. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Setting_the_default_language_using_the_/Lang_entry_in_the_document_catalog_of_a_PDF_document"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF17">
    		<short-name>Specifying consistent page numbering for PDF documents</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    			<success-criterion idref="navigation-mechanisms-location"/>
    			<success-criterion idref="consistent-behavior-consistent-locations"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to help users locate themselves in a document by ensuring that the page numbering displayed in the PDF viewer page controls has the same page numbering as the document. For example, Adobe Acrobat Pro and Reader display page numbers in the Page Navigation toolbar. The page number format is specified by the /PageLabels entry in the Document Catalog.</p>
    			<p>Many documents use specific page number formats within a document. Commonly, front matter is numbered with lowercase Roman numerals. The main content, starting on the page numbered 1, may actually be the fifth or sixth page in the document. Similarly, appendices may begin with page number 1 plus a prefix of the appendix letter (e.g., "A-1").</p>
<p>Authors should make sure that the page numbering of their converted documents is reflected in any page number displays in their user agent. Consistency in presenting the document's page numbers will help make navigating the document more predictable and understandable.</p>
    			<p>As an example, if /PageLabels has not been provided to describe the page number formatting, the page numbering scheme will not be reflected in the Page Navigation toolbar in Adobe Acrobat Pro or Reader. This toolbar displays the page number in a text box, which users can change to move to another page. In addition, users can select the arrows to move one page up or down in the document. The toolbar also displays the relative page number location. In the image below, the default display indicates the user is on page 1 of 4 pages.</p>
    			<p><image><img source="working-examples/PDF17/page_nos-nav.jpg" height="43" width="155"/><alt>Page Navigation toolbar in Adobe Acrobat Pro, displaying the page number in a text box, which users can change to move to another page. In addition, users can select the arrows to move one page up or down in the document. The toolbar also displays the relative page number location, e.g., page 1 of 4 pages.</alt></image> </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Editing PDF page number formatting specifications using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>The example document converted from Microsoft Word 2007 has 4 pages, numbered
    						i, ii, iii, 1. The image below shows the Word document with lowercase
    						Roman numeral page numbering specified In Word using: </p>
    					<ulist><item><p> Insert ribbon &gt; Page number &gt; Page Number Format </p></item></ulist>
    					<p>In this document, a new section has been created with page numbering
    						beginning with Arabic numeral 1 on the fourth page of the document. The document
    						was then converted to PDF from Word. </p>
    					<p><image><img source="working-examples/PDF17/pages_nos_word.jpg" height="380" width="302"/><alt>The Page Number Format dialog in Word, specifying lowercase Roman page numbering.</alt></image>  </p>
    					<p>In Adobe Acrobat Pro, Select View &gt; Navigation Panels &gt; Pages.
    						The following image shows the page thumbnails in the Pages panel
    						and the Page Navigation toolbar. Both the thumbnails and the toolbar
    						use Arabic page numbers. </p>
    					<p><image><img source="working-examples/PDF17/page_nos1.jpg" height="415" width="297"/><alt>Page thumbnails in the Pages panel and the Page Navigation toolbar, both using Arabic page numbers.</alt></image>  </p>
    					<p>To correct the page numbers: </p>
    					<olist><item><p> Select the pages to be renumbered </p></item><item><p> Access the context menu for the selected pages and select Number
    						Pages </p></item><item><p> In the Page Numbering dialog, select the lowercase Roman numeral
    							style and the starting page (1 by default, which is correct in this
    							case) </p></item><item><p> Select OK </p></item></olist>
    					<p>The following image shows the Page Numbering dialog and selections. </p>
    					<p><image><img source="working-examples/PDF17/page_nos2.jpg" height="487" width="647"/><alt>Three pages selected on the Pages panel and the Page Numbering dialog specifying the new page styles. The starting page is specified as 1 (default), which is correct.</alt></image>  </p>
    					<p>Follow the same process to change the fourth page number to Arabic
    						numeral 1. </p>
    					<p>The following image shows the correct page numbers for the 4 pages.
    						Note that page iii is selected in the Pages panel and the Page Navigation
    						toolbar shows iii in the text area. In addition, the relative location
    						in the document is shown at the right of the toolbar: "(3 of 4)." </p>
    					<p><image><img source="working-examples/PDF17/page_nos3.jpg" height="414" width="302"/><alt>The Pages panel in Adobe Acrobat Pro showing pages numbered i, ii, iii, 1. The Page Navigation toolbar shows iii for the third page. The relative page location is also displayed as '(3 of 4).'</alt></image>  </p>
    					<p>This example is shown in operation in the <loc href="page-numbers.docx" linktype="examples">working example of specifying page numbers in a document converted from Word (Word file)</loc> and <loc href="page-numbers.pdf" linktype="examples">working example of specifying page numbers in a document converted from Word (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Specifying page numbers using the /PageLabels entry</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for specifying
    						multiple page numbering schemes in a document. </p>
    					<p>The example below is for a document with pages labeled: </p>
    					<example><p>i, ii, iii, iv, 1, 2, 3, A-8, A-9, …  </p></example>
    					<p>This numbering scheme requires 3 page-label dictionaries (for lowercase
    						Roman, Arabic, and prefixed numbers) </p>
    					<codeblock><![CDATA[1 0 obj
    << /Type /Catalog
       /PageLabels << /Nums [ 0 << /S /r >>  % lowercase Roman numerals
                              4 << /S /D >>  % Arabic numerals
                              7 << /S /D     % Arabic numerals with ...
                      /P (A-)                % the prefix "A-"...
                      /St 8                  % starting at page 8
                                >>
                            ]
                    >>
       …
   >>
  endobj
]]></codeblock>
    					<p>Page labels are specified as follows: </p>
    					<ulist>
    						<item><p><code>/S</code> specifies the numbering style for page numbers:</p>
    						<ulist>
    							<item><p><code>/D</code> - Arabic numerals (1,2,3...) </p></item>
    							<item><p><code>/r</code> - lowercase Roman numerals (i, ii, iii,...) </p></item>
    							<item><p><code>/R</code> - uppercase Roman numerals (I, II, III,...) </p></item>
    							<item><p><code>/A</code> - uppercase letters (A-Z) </p></item>
    							<item><p><code>/a</code> - lowercase letters (a-z) </p></item>
    						</ulist>
    						</item>
    						<item><p><code>/P</code> (optional) - page number prefix </p></item>
    						<item><p><code>/St</code> (optional) - the value of the first page number in the range
    						(default: 1) </p></item>
    					</ulist>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 12.4.2 (Page Labels) <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			 <relatedtech idref="PDF14"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For every section in the document that uses a different pagination
    					format, check that the page navigation feature uses the same format
    					used on the document pages:</p>
    					<ulist><item><p> Select the pages that begin a new pagination
    						format and visually verify that the same format and page number
    						is shown in the page navigation feature. </p></item><item><p> Using a screen reader, check that the page number announced
    							in the page navigation feature is the same as the page number
    							announced on the document page. </p></item><item><p> Using a tool that is capable of showing the /PageLabels entries,
    								open the PDF document and view the entries. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API, and verify that the /PageLabels entries are specified correctly. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Specifying_consistent_page_numbering_for_PDF_documents_in_Adobe_Acrobat_Pro_or_Reader"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF18">
    		<short-name>Specifying the document title using the Title entry in the document
    			information dictionary of a PDF document</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="navigation-mechanisms-title"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The intent of this technique is to show how a descriptive title for
    				a PDF document can be specified for assistive technology by using the
    				/Title entry in the document information dictionary and by setting
    				the DisplayDocTitle flag to True in a viewer preferences dictionary.
    				This is typically accomplished by using a tool for authoring PDF. </p>
    			<p>Document titles identify the current location without requiring users
    				to read or interpret page content. User agents make the title of the
    				page easily available to the user for identifying the page. For instance,
    				a user agent may display the page title in the window title bar or
    				as the name of the tab containing the page. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Setting the document title in the metadata and specifying
    					that the title be displayed in the title bar using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Open the PDF document in Adobe Acrobat Pro: </p>
    					<olist><item><p> Select File &gt; Properties </p></item><item><p> Select the Description tab to view the metadata in the document,
    						including the document information dictionary </p></item><item><p> Modify the Title field to add or change the document's Title entry </p></item></olist>
    					<p><image><img source="working-examples/PDF18/title-entry.jpg" height="673" width="610"/><alt>Viewing the Title field in the Description tab of the Properties dialog. The document title is entered in the field.</alt></image> </p>
    					<p>Note that, with Adobe Acrobat installed, you can also enter and read
    						the data properties information from the desktop. Access the file's
    						context menu, choose Properties, and select the PDF tab. Any information
    						you type or edit in this dialog box also appears in the Document Properties
    						Description when you open the file. </p>
    					<p>To display the document title in the title bar of a user agent: </p>
    					<olist><item><p> Select File &gt; Properties </p></item><item><p> Select the Initial View tab </p></item><item><p> In the Window Options section, select Document Title in the Show
    						pull-down list. </p></item></olist>
    					<p><image><img source="working-examples/PDF18/doc-title.jpg" height="671" width="610"/><alt>Specifying that the document title be displayed in the title bar. In the Window Options, Show Document Title is selected.</alt></image> </p>
    					<p>The title is displayed in the title bar, as shown in the image below. </p>
    					<p><image><img source="working-examples/PDF18/title-bar.jpg" height="34" width="492"/><alt>Image of the Adobe Acrobat Pro title bar with the title of the document displayed.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="title-bar.pdf" linktype="examples">working example of displaying document title in the title bar</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>A /Title entry in the document information dictionary
    				of a PDF document</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for providing
    						a /Title entry in a document information dictionary that contains a
    						document title. </p>
    					<codeblock><![CDATA[1 0 obj   
   << /Title (Applying Guerrilla Tactics to Usability Testing by People with Disabilities)    
      /Author (Mary Smith) 
      /CreationDate (D:19970915110347-08'00')    
   >>   
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
    					<item><p> Section 14.3.3 (Document Information Dictionary) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/en/pdf/PDFReference16.pdf#page=794">PDF
    					Reference 1.6, TITLE entry of the document information dictionary</loc> </p></item>
    				</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G88"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p>Verify that the title for the document is correctly specified and
    					displayed in the user agent title bar by applying one of the following:</p>
    					<ulist><item><p> Open the PDF document with a screen reader, listening to hear
    						that the document title is read correctly. </p></item><item><p> Using a PDF editor, check that the document title is specified.
    							Select the Initial View tab to check that the title will be displayed. </p></item><item><p> Use a tool which is capable of showing the /Title entry value
    								in the document catalog to open the PDF document and view the
    								/Title entry and /DisplayDocTitle flag settings. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Specifying_the_document_title_using_the_Title_entry_in_the_document_information_dictionary_of_a_PDF_document"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF19">
    		<short-name>Specifying the language for a passage or phrase with the Lang entry
    			in PDF documents</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="meaning-doc-lang-id"/>
    			<success-criterion idref="meaning-other-lang-id"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to specify the language of a passage,
    				phrase, or word using the /Lang entry to provide information in the
    				PDF document that user agents need to present text and other linguistic
    				content correctly. This is normally accomplished using a tool for authoring
    				PDF. </p>
    			<p>Both assistive technologies and conventional user agents can render
    				text more accurately when the language is identified. Screen readers
    				can load the correct pronunciation rules.     				As a result, users with disabilities are better able to understand
    				the content. </p>
    			<note><p>This technique can be used to set the default
    				language for the entire document if the entire document is contained
    				in the container or tag. In this case, this technique would apply to
    				Success Criterion 3.1.1. </p></note>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding a /Lang entry to specify the language for a paragraph
    					using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> In the Tools menu, select Advanced Editing. </p></item><item><p> Select the TouchUp Reading Order Tool. </p></item><item><p> Click the Show Order Panel button in the TouchUp Reading Order
    						Tool </p></item><item><p> Select the Tags tab in the Show Order Panel and select the paragraph
    							that is in the different language. You can also use the Options menu
    							in the Tags tab: select Find Tag from Selection. </p></item><item><p> Right-click the selection and select Properties in the context
    								menu. </p></item><item><p> In the Tags tab in the Properties dialog, select the language
    									from the drop-down list. </p></item></olist>
    					<note><p>Acrobat includes 16 preset language selections.
    						If you need to specify a language that is not on the list, such as
    						Russian, you must type the ISO 639 code for the language, not its name. </p></note>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a /Lang entry to specify the language for a specific
    				word or phrase using Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> Select the word or phrase that is in a different language and
    						create a tag for it in the Reading Order Panel (e.g., Text). </p></item><item><p> Open the Tags tab in the Show Order Panel and select the tagged
    							word or phrase that is in the different language. You can also use
    							the Options menu in the Tags tab: select Create Tag from Selection. </p></item><item><p> Right-click the selection and select Properties in the context
    								menu. </p></item><item><p> In the Tags tab in the Properties dialog, select the language
    									from the drop-down list. </p></item></olist>
    					<p>When you tag a word or phrase, Acrobat splits the original content
    						into three document content tags: one for the text that precedes your
    						selection, one for the selection, and one for the text that follows
    						the selection. As needed, drag the document content tag for the selected
    						text into position between the other two tags, so that the text reads
    						in the proper order. All three tags must also be at the same level
    						beneath their parent tag. Drag them into place if they are not. </p>
    					<p><image><img source="working-examples/PDF19/language.jpg" height="585" width="629"/><alt>Specifying the language for a word in text using the Show Order Panel of the TouchUp Reading Order tool.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="lang-of-phrase.pdf" linktype="examples">working example of marking a specific word or phrase in Acrobat Pro</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Specifying the language for a word or phrase in a PDF
    				document using a /Lang entry</head>
    				<description>
    					<p>Below the level of the default document language, the language for
    						a passage may be specified for the following items: </p>
    					<ulist><item><p>Marked-content sequences that are not in the structure hierarchy,
    						through a /Lang entry in a property list attached to the marked-content
    						sequence with a Span tag. </p></item><item><p>Structure elements of any type, through a /Lang entry in the structure
    							element dictionary. </p></item></ulist>
    					<p>The following code fragment illustrates code that is typical for using
    						the /Lang entry to override the default document language by specifying
    						a marked-content sequence within a page's content stream: </p>
    					<codeblock><![CDATA[   /P % Start of marked-content sequence
   BDC
      (See you later, or in Spanish you would say, ) Tj
      /Span << /Lang (es-MX) >>% Start of nested marked-content sequence
     BDC
      (Hasta la vista.) Tj
     EMC% End of nested marked-content sequence
   EMC% End of marked-content sequence
]]></codeblock>
    					<p>The following code fragment illustrates code that is typical for
    						using the /Lang entry in the structure element dictionary. In this
    						case, the /Lang entry applies to the marked-content sequence having
    						an MCID (marked-content identifier) value of 0 within the indicated
    						page's content stream. </p>
    					<codeblock><![CDATA[1 0 obj% Structure element
  << /Type /StructElem
    /S /Span% Structure type
    /P /P% Parent in structure hierarchy
    /K<< /Type /MCR
      /Pg 2 0 R% Page containing marked-content sequence
      /MCID 0% Marked-content identifier
     >>
   /Lang (es-MX)% Language specification for this element
   >>
endobj
2 0 obj% Page object
  << /Type /Page
     /Contents 3 0 R% Content stream
   …
   >>
   endobj
3 0 obj% Page's content stream
  << /Length … >>
    stream
     BT
      /P % Start of marked-content sequence
      BDC
     (See you later, or in Spanish you would say, ) Tj
     /Span << /MCID 0 >>% Start of nested marked-content sequence
    BDC
     (Hasta la vista.) Tj
    EMC% End of nested marked-content sequence
  EMC% End of marked-content sequence
 ET
 endstream
 endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.9.2 (Natural Language Specification) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://www.loc.gov/standards/iso639-2/php/code_list.php">ISO
    						639-2 Codes</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/en/pdf/PDFReference16.pdf#page=886">PDF
    							Reference 1.6, 10.8.1 Natural Language Specification (PDF 8.7 Mb)</loc> </p></item><item><p> <loc href="http://pdf.editme.com/pdfua-naturalLanguageSpecification">PDF
    								Standards: Natural Language Specification</loc> </p></item><item><p> <loc href="http://www.adobe.com/accessibility/products/acrobat/pdf/A9-accessible-pdf-from-word.pdf">Adobe®
    									Acrobat® 9 Pro Accessibility Guide: Creating Accessible PDF from
    									Microsoft® Word</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="PDF16"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p>Verify that the language of a passage, phrase, or word that differs
    					from the language of the surrounding text is correctly specified
    					by a /Lang entry on an enclosing tag or container:</p>
    					<ulist><item><p> Read the PDF document with a screen reader that supports the language of the phrase and the language of the surrounding text, listening to hear
    						that the text is read in the correct natural language. </p></item><item><p>Using a PDF editor, select the word or phrase that is in the different language and check that the language is set correctly. </p></item><item><p> Use a tool which is capable of showing the /Lang entry value
    								to open the PDF document and view the language settings. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API and verify that the language for the passage or phrase is
    									set correctly. </p></item></ulist>
    				</item><item><p> Verify that if the container or tag contains the entire document,
    					the language setting is the language intended as the default for
    					the document. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 and #2 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Specifying_the_language_for_a_passage_or_phrase_with_the_Lang_entry_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF20">
    		<short-name>Using Adobe Acrobat Pro's Table Editor to repair mistagged tables</short-name>
    		<applicability>
    			<p>Tagged PDF documents with tables.</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The purpose of this technique is to show how table cells in PDF documents
    				can be marked up so that the logical relationships among rows and columns
    				are preserved and recognized by assistive technology. This is typically
    				accomplished by using a tool for authoring PDF. </p>
    			<p>However, tables converted to PDF may have incorrectly merged or split
    				table cells, even if they were marked up correctly in the authoring
    				tool. Authors can ensure that table cells are structured properly by
    				using the Table Editor in Adobe Acrobat Pro's TouchUp Reading Order
    				tool. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Repairing table cells using the Table Editor in the TouchUp
    					Reading Order tool in Adobe Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>This example uses a table that was marked up correctly when it was
    						created in Microsoft Word. Some table headers span two rows in the
    						header row; one table header spans two columns. </p>
    					<p><image><img source="working-examples/PDF20/table-word.jpg" height="289" width="516"/><alt>A correctly marked up table in Word, with complex headers, before conversion to PDF.</alt></image>  </p>
    					<p>To check the table in the PDF document: </p>
    					<olist><item><p> Advanced &gt; Accessibility &gt; TouchUp Reading Order... </p></item><item><p> Select the table by clicking the number in the top left hand corner 
    						of the table (3 in the reading order in the image below). </p></item>
    					<item><p> Select the Table Editor button on the TouchUp Reading Order panel.
    						The table cells will be outlined in red and labeled with their tags.
    						The red outlines may not exactly match up to the table cells but
    						you should be able to determine if the cells are tagged correctly. </p></item></olist>
    					<p>The following image shows the example table in the TouchUp Reading
    						Order tool. Note that the Results header appears to span two sub-headers
    						and the other headers to the left span the two rows in the Results
    						header. </p>
    					<p><image><img source="working-examples/PDF20/table-1.jpg" height="584" width="822"/><alt>Table in the TouchUp Reading Order tool. As in Word, the table Results header appears to span two sub-headers and the other headers to the left span the two rows in the Results header.</alt></image>  </p>
    					<p>The following images shows the example table in the Table Editor.
    						The cells are outlined in red, and the tab for each cell is displayed.
    						Upon conversion, the Results header was incorrectly split and does
    						not span its two sub-headers. The headers to the right were incorrectly
    						split into 2 cells each and do not span the Results headers. In addition,
    						the incorrectly split cells were merged into one cell. </p>
    					<p><image><img source="working-examples/PDF20/table-2.jpg" height="285" width="520"/><alt>Example table in the Table Editor, showing table cells and the tag for each cell. The Table Editor shows the Results header was incorrectly split and does not span its two sub-headers; and other headers were also incorrectly split and merged.</alt></image>  </p>
    					<p>To repair the Results header: </p>
    					<olist><item><p> Select the header in the table (it will be outlined in blue when
    						selected) </p></item><item><p> Access the context menu </p></item><item><p> Select Table Cell Properties... </p></item><item><p> In the Table Cell Properties dialog, change the Column Span from
    							1 to 2 </p></item><item><p> Press OK. You'll get a warning that the change might result in
    								a malformed table structure. In this case, the change is correct.
    								The cell you changed should change color to show the new span, as
    								shown in the following image. </p></item></olist>
    					<p><image><img source="working-examples/PDF20/table-2a.jpg" height="473" width="686"/><alt>The Table Cells Properties dialog showing the Column Span changed to 2 to repair a mistagged header in this example.</alt></image>  </p>
    					<p>Similarly, to repair the incorrectly split header cells to the left
    						of Results header: </p>
    					<olist><item><p> Select the top cell in the column (it will be outlined in blue
    						when selected) </p></item><item><p> Access the context menu </p></item><item><p> Select Table Cell Properties... </p></item><item><p> In the Table Cell Properties dialog, change the Row Span from
    							1 to 2 </p></item><item><p> Press OK. The following image shows the correction being made
    								to the last header cell, with the corrected header cells to its left. </p></item></olist>
    					<p><image><img source="working-examples/PDF20/table-2b.jpg" height="474" width="789"/><alt>The Table Cells Properties dialog showing the Row Span changed to 2 to repair a mistagged header in this example.</alt></image>  </p>
    					<p>The following image shows the repaired example table. </p>
    					<p><image><img source="working-examples/PDF20/table-3a.jpg" height="303" width="519"/><alt>The repaired example table in the Table Editor. It now has the same table structure as the original Word table.</alt></image>  </p>
    					<p>This example is shown in operation in the <loc href="table.docx" linktype="examples">working example of repairing table structure (Word file)</loc> and <loc href="table.pdf" linktype="examples">working example of repairing table structure (PDF file)</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking up a table using table structure elements</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for a
    					simple table (header row and data row) such as shown in Examples 1-3: </p>
    					<codeblock><![CDATA[95 0 obj                %Structure element for a table
 << 
  /A 39 0 R
  /K[96 0 R 101 0 R 106 0 R 111 0 R]
  /P 93 0 R
  /S/Table              %standard structure type is table
 >> 
 endobj
96 0 obj                %Structure element for a table row
 << 
  /K[97 0 R 98 0 R 99 0 R 100 0 R]
  /P 95 0 R
  /S/TR                 %standard structure type is table row
 >> 
 endobj
97 0 obj                %Structure element for a table header
 <</A[23 0 R 120 0 R]
   /K 1
   /P 96 0 R
   /S/TH                 %standard structure type is table head
   /Pg 8 0 R
 >> 
endobj
104 0 obj                %Structure element for table data (cell contents)
 << 
  /A 29 0 R
  /K 7
  /P 101 0 R
  /S/TD                  %standard structure type is table data
  /Pg 8 0 R
 >> 
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist>
    					<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
    					<item><p> 14.8.4.3.4 (Table Elements) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item>
    				</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="H51"/>
    			<relatedtech idref="PDF6"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p>For a table that has been repaired with the Table Editor, confirm
    					one of the following:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that the tabular information is presented in a way that preserves
    						logical relationships among the table header and data cells.
    						(Configure the screen reader to not use heuristics to read table
    						header cells.) </p></item><item><p> Using a PDF editor, verify that the appropriate <emph>TR</emph>, <emph>TH</emph>,
    							and <emph>TD</emph> tags are in the proper reading order and hierarchy
    							in the table tree. </p></item><item><p> Use a tool which is capable of showing the table elements
    								to open the PDF document, view the table structure, and verify
    								that it contains the appropriate TR, TH, and TD structures. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API, and verify that the table structure contains the appropriate
    									TR, TH, and TD structures, and that they are in the proper reading
    									order and hierarchy. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Using_Adobe_Acrobat_Pro%27s_Table_Editor_to_repair_mistagged_tables"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF21">
    		<short-name>Using List tags for lists in PDF documents</short-name>
    		<applicability>
    			<p>Tagged PDF documents with lists.</p>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="content-structure-separation-programmatic"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The intent of this technique is to create lists of related items using
    				list elements appropriate for their purposes. PDF files containing
    				lists are normally created or repaired using a tool for authoring PDF. </p>
    			<p>When markup is used that visually formats items as a list but does
    				not indicate the list relationship, users may have difficulty navigating
    				the information. An example of such visual formatting is simply using
    				line-breaks to separate list items. </p>
    			<p>Some assistive technologies allow users to navigate from list to list
    				or item to item. If the lists are not correctly formatted with list
    				tags, these users will have difficulty understanding the list content. </p>
    			<p>The easiest way to create lists in PDF content is to format them properly
    				using list markup in the authoring tool, for example, Microsoft Word
    				or OpenOffice.org Writer. However, if you do not have access to the
    				source file and authoring tool, you can use Acrobat Pro's TouchUp Reading
    				Order tool and the Tags panel. </p>
    			<p>The <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    				specification</loc> defines list structure in section 14.8.4.3.3 (List
    				Elements). The structure types for lists in PDF documents are: </p>
    			<ulist><item><p> L - the List tag, which contains one or more LI tags. </p></item><item><p> LI - the List Item tag. List item tags can contain Lbl and LBody
    				tags. </p></item><item><p> Lbl - the list item label. Contains distinguishing information
    					such as a item number or bullet character. </p></item><item><p> LBody - the list item body. Contains list item content, or in
    						the case of a nested list, it may contain additional List tag trees. </p></item></ulist>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding lists to Microsoft Word 2007 documents</head>
    				<description>
<p>This example is shown with Microsoft Word. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>On the Home ribbon, use the lists tools to create or repair lists
    						in Word documents. This is the easiest way to ensure that lists are
    						formatted correctly when they are converted to PDF. </p>
    					<p>In the image below, the numbered and bullet lists were created using
    						the list tools. The third list did not use the list tool (see the ribbon)
    						and the list will not be tagged as list elements when converted to
    						PDF. </p>
    					<p><image><img source="working-examples/PDF21/lists-word.jpg" height="563" width="481"/><alt>Screenshot showing correctly formatted ordered and unordered lists, and a third section of text formatted to appear as a list, but not using the list formatting tool in Microsoft Word.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding lists to OpenOffice.org Writer 2.2 documents</head>
    				<description>
<p>This example is shown with OpenOffice.org Writer. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<p>Use the Bullets and Numbering tool to create or repair lists in OpenOffice.org
    						Writer documents. This is the easiest way to ensure that lists are
    						formatted correctly when they are converted to PDF. </p>
    					<p>In the image below, the numbered and bullet lists were created using
    						the list tools. The third list did not use the list tool (see the toolbar)
    						and the list will not be tagged as list elements when converted to
    						PDF. </p>
    					<p><image><img source="working-examples/PDF21/lists-oo.jpg" height="517" width="451"/><alt>Screenshot showing correctly formatted ordered and unordered lists, and a third section of text formatted to appear as a list, but not using the list formatting tool in OpenOffice.org Writer.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="lists.odt" linktype="examples">working example of adding lists to OpenOffice Writer documents</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Ensuring that lists are correctly formatted using Adobe
    				Acrobat 9 Pro</head>
    				<description>
<p>This example is shown with Adobe Acrobat Pro. There are other software tools that perform similar functions. See the list of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>.</p>
    					<olist><item><p> View &gt; Navigation Panels... &gt; Tags </p></item><item><p> Inspect the lists in the document to determine which, if any,
    						are not formatted properly. </p></item></olist>
    					<p>In the following image, the third list is formatted as text. The list
    						items are separated only by line-breaks. Assistive technology may not
    						be able to render the list intelligibly for users. </p>
    					<p><image><img source="working-examples/PDF21/unformattedlist.jpg" height="427" width="550"/><alt>Tags panel showing incorrectly formatted list as text beneath a Text body tag rather than nested under list tags.</alt></image> </p>
    					<p>To repair the list, use the Tags panel to create list tags in the
    						content. </p>
    					<p>The following image shows the resulting first list item correctly
    						formatted. </p>
    					<p><image><img source="working-examples/PDF21/listrepair.jpg" height="448" width="556"/><alt>Tags panel showing first list item correctly nested under list tags.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="lists.pdf" linktype="examples">working example of ensuring lists are properly formatted in Acrobat Pro</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Marking up lists using List structure elements</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical marking
    						up a list hierarchy in PDF documents. It uses the simple numbered list
    						in the previous examples. This is typically accomplished by an authoring
    						tool. </p>
    					<codeblock><![CDATA[4 0 obj
  <</Type /Page
    /Contents 5 0 R
  >>

endobj
5 0 obj
  << /Length 3 0 R >>
  stream
   /P <</MCID 1>> BDC
      BT T* (The most popular sports are:) Tj ET EMC
   /Lbl <</MCID 11>> BDC
      BT T* (1. ) Tj ET EMC
   /LBody <</MCID 12>> /BDC
      BT (Snow-shoeing ) Tj ET EMC
   /Lbl <</MCID 21>> BDC
      BT T* (2. ) Tj ET EMC
   /LBody <</MCID 22>> /BDC
      BT (Ice-skating ) Tj ET EMC
   /Lbl <</MCID 31>> BDC
      BT T* (3. ) Tj ET EMC
   /LBody <</MCID 32>> /BDC
      BT (Skiing ) Tj ET EMC
endstream
endobj

101 0 obj                 % Structure element for intro paragraph to list ("The most popular sports are:")
  << /Type /StructElem
     /S /P
     /P 201 0 R
     /Pg 4 0 R
     /K 1
  >>
endobj

111 0 obj                  % Structure element for first item, list label (Lbl): "1."
  << /Type /StructElem
     /S /Lbl
     /P 211 0 R
     /Pg 4 0 R
     /K 11
  >>
endobj

112 0 obj
  << /Type /StructElem     % Structure element for first item, list text (LBody): ("Snow-shoeing")
     /S /LBody
     /P 211 0 R
     /Pg 4 0 R
     /K 12
  >>
endobj

... [ objects 121-122 and 131-132, referencing MCIDs 21-22 and 31-32 are omitted in the interest of space. ]

201 0 obj
  << /Type /StructElem
     /S /Caption            % Intro paragraph
     /P 400 0 R
     /K [101 0 R]
  >>
endobj

211 0 obj
  << /Type /StructElem
     /S /LI                 % List item for "1. Snow-shoeing"
     /P 400 0 R
     /K [111 0 R 112 0 R]
  >>
endobj

212 0 obj
  << /Type /StructElem
     /S /LI                 % List item for "2. Ice-skating"
     /P 301 0 R
     /K [121 0 R 122 0 R]
  >>
endobj

213 0 obj
  << /Type /StructElem
     /S /LI                 % List item for "3. Skiing"
     /P 301 0 R
     /K [131 0 R 132 0 R]
  >>
endobj

400 0 obj
  << /Type /StructElem
     /S /L                   % Top-level structure element in the list hierarchy                
     /K [201 0 R 211 0 R 212 0 R 213 0 R]
  >>
endobj
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 14.8.4.3.3 (List Elements) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p><loc href="http://help.adobe.com/en_US/acrobat/pro/using/WS58a04a822e3e50102bd615109794195ff-7ce6.w.html">Edit Tags in the Tag Panel documentation</loc> </p></item>
<item><p><loc href="http://www.adobe.com/accessibility/pdf">PDF and Accessibility</loc></p></item>
</ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G115"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For a list in a PDF document, verify in one of the following
    					ways:</p>
    					<ulist><item><p> Read the PDF document with a screen reader, listening to hear
    						that list is read correctly when reading the content line-by-line. </p></item><item><p> Use a tool that is capable of showing lists to open the PDF
    							document and view the list to check that it is correctly structured. </p></item><item><p> Inspect the tag tree to verify that the list is structured
    								according to the PDF specification. </p></item><item><p> Use a tool that exposes the document through the accessibility
    									API and verify that the list is correctly structured. </p></item></ulist>
    				</item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Using_List_tags_for_lists_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF22">
    		<short-name>Indicating when user input falls outside the required format or
    			values in PDF forms</short-name>
    		<applicability>
    			<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="minimize-error-identified"/>
    			<success-criterion idref="minimize-error-suggestions"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to notify the user when user
    				input to a field that requires a specific, required format (e.g.,
    				date fields) is not submitted in that format. </p>
    			<p>If the required format is not used, an alert dialog describes the
    				nature of the error in text. This may be accomplished through scripting
    				created by the author (see, for example, <loc href="http://www.w3.org/TR/2010/NOTE-WCAG20-TECHS-20101014/SCR18">SCR18:
    					Providing client-side validation and alert</loc>). User agents, such
    				as Adobe LiveCycle can provide automatic alerts (as described in
    				the examples below). </p>
    			<note><p>Once the user dismisses the alert dialog,
    				it may be helpful if the script positions the keyboard focus on
    				the field where the error occurred, although some users may expect
    				the focus to remain on the last control focused prior to the alert
    				appearing. Authors should exercise care to ensure that any movement
    				of the focus will be expected. For example, if the alert announces
    				an error in a phone number format, positioning the focus on the
    				phone number field when the alert is dismissed can be regarded as
    				helpful and expected. In some cases, however, this may not be possible.
    				If multiple input errors occur on the page, an alternative approach
    				to error notification should be implemented. </p></note>
    			<p>Ensuring that users are aware an error has occurred, can determine
    				what is wrong, and can correct it are key to software usability
    				and accessibility. Meeting this objective helps ensure that all
    				users can complete for-based transactions with ease and confidence. </p>
    			<section>
    				<head>Labels for required formats in form controls</head>
    				<p>It is also important that users are aware that an error <emph role="strong">may</emph> occur.
    					You can incorporate this information in labels; for example, "Date
    					(MM/DD/YYYY)." See <specref ref="PDF10"/>. </p>
    			</section>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Providing validation for an input field format using
    					Adobe Acrobat 9 Pro</head>
    				<description>
    					<p>This example is shown with Adobe Acrobat Pro. There are other software
    						tools that perform similar functions. See the list of other software
    						tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<p>Many fields -- telephone number, postal code, date -- must have
    						data entered in a specific format or pattern. </p>
    					<olist><item><p> Access the context menu for the form control that requires
    						a specific format. </p></item><item><p> Select Properties... </p></item><item><p> In the Format tab, select the Format Category (in this case,
    							Date). The Date Options appear. </p></item><item><p> Select the format for this form control (in this case, mm/dd/yyyy). </p></item><item><p> In the General tab, specify "Date (mm/dd/yyyy)" for
    								the Name and Tooltip for the control. </p></item></olist>
    					<p><image><img source="working-examples/PDF22/dateformat.jpg" height="611" width="661"/><alt>Specifying a required format for an input field format using Adobe Acrobat 9 Pro </alt></image> </p>
    					<p>When a user types a recognized date format, it is converted automatically
    						to the specified format. If the date format or value is not recognized,
    						an error alert appears and provides further information, as shown
    						in the image below. </p>
    					<p><image><img source="working-examples/PDF22/dateerror.jpg" height="210" width="501"/><alt>Error alert for date with unrecognized format or value.</alt></image> </p>
    					<p>This example is shown in operation in the <loc href="required-fields.pdf" linktype="examples">working example of Required Fields in Acrobat</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Providing validation for an input field format using
    					Adobe LiveCycle Designer ES 8.2.1</head>
    				<description>
    					<p>This example is shown with Adobe LiveCycle Designer. There are
    						other software tools that perform similar functions. See the list
    						of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<olist><item><p> Select the form control that has a required format. </p></item><item><p> In the Object palette, click the Validation Pattern... button. </p></item><item><p> Because this is a date field the Patterns-Date Field dialog
    						appears. Select the pattern or format you want users to enter.
    						Then click OK.</p>
					<p><image><img source="working-examples/PDF22/form-validation.jpg" height="510" width="903"/><alt>Using LiveCycle to specify form fields that require pattern validation</alt></image> </p></item><item><p> In the Object palette, use the Validation Pattern Message box
    							to type a warning message. Be sure to include the required pattern.
    							This message appears when a user tries to submit the form using
    							an invalid date format. </p></item></olist>
    					<p>This example is shown in operation in the <loc href="required-fields-lc.pdf" linktype="examples">working example of Required Fields in LiveCycle Designer</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Validating a required date format in a PDF form using
    				JavaScript using Adobe Acrobat Pro 9</head>
    				<description>
    					<p>This example is shown with Adobe Acrobat Pro. There are other software
    						tools that perform similar functions. See the list of other software
    						tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<p>The following JavaScript code illustrates the use of a script to
    						validate form fields, in this case, a date field. To add this script
    						to the form field, open the Text Field Properties dialog, as shown
    						in Example 1, and select Edit in the Validate tab: </p>
    					<p><image><img source="working-examples/PDF22/jscript.jpg" height="462" width="506"/><alt> Text Field Properties dialog, with the Validate tab open to specify JavaScript validation code.</alt></image> </p>
    					<codeblock><![CDATA[// JavaScript code for date mask format MM/DD/YYYY
var re = /^[mdy0-9]{2}\/[mdy0-9]{2}\/[mdy0-9]{4}$/
//Allow blank space in field
if (event.value !="") {
  if (re.test(event.value) == false) {
    app.alert ({
       cTitle: "Incorrect Format",
       cMsg: "Please enter date using mm/dd/yyyy format"
    });
  }
}
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> <loc href="http://www.adobe.com/devnet/acrobat/javascript.html">JavaScript
    					for Acrobat</loc> </p></item></ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G89"/>
    			<relatedtech idref="SCR18"/>
    			<relatedtech idref="PDF23"/>
    			<relatedtech idref="PDF10"/>
    			<relatedtech idref="PDF5"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<p>For each form field that requires specific input, verify that validation
    					information and instructions are provided by applying the following: </p>
    				<olist><item><p> Check that the format or value that is required is indicated
    					in the form control's label. </p></item><item><p> Use an erroneous format or value and move off the field: make
    						sure that an alert describing the error is provided. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 and #2 are true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Indicating_when_user_input_falls_outside_the_required_format_or_values_in_PDF_forms"/></source>
    		</admin>
    	</technique>
    	<technique id="PDF23">
    		<short-name>Providing interactive form controls in PDF documents</short-name>
    		<applicability>
    			<ulist><item><p> Tagged PDF documents with forms. </p></item><item><p> PDF forms created using Adobe LiveCycle Designer. </p></item></ulist>
    		</applicability>
    		<applies-to>
    			<success-criterion idref="keyboard-operation-keyboard-operable"/>
    			<success-criterion idref="keyboard-operation-all-funcs"/>
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			<p>The objective of this technique is to ensure that interactive form
    				controls in PDF documents allow keyboard operation. Interactive
    				PDF forms are generally created using a tool for authoring PDF.
    				Form controls are implemented in PDF documents either as described
    				in Section 12.7 (Interactive Forms) of <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> or as described in the <loc href="http://partners.adobe.com/public/developer/xml/index_arch.html">Adobe
    						XML Forms Architecture (XFA)</loc>. </p>
    			<p>The types of PDF form controls are: text input field, check box,
    				radio button, combo box, list box, and button. </p>
    			<p>Form controls allow users to interact with a PDF document by filling
    				in information or indicating choices, which can then be submitted
    				for processing. Users who rely on keyboard access must be able to
    				recognize and understand the form fields, make selections, and provide
    				input to complete the forms, and submit the form, just as sighted
    				users can. </p>
    			<p>Interactive form controls can be provided for forms created by
    				converting a scanned paper form to tagged PDF or by creating a form
    				in an authoring application such as Microsoft Word or Open Office
    				and converting it to tagged PDF. </p>
    			<p>However, documents created by authoring applications that provide
    				form design features might not fully retain their fillable form
    				fields on conversion to PDF. Complex forms in particular may not
    				have properly converted form fields and labels when tagged in conversion. </p>
    			<p>Using Adobe Acrobat Pro with forms in converted documents, you
    				can ensure that form fields are keyboard accessible and usable by: </p>
    			<ulist><item><p> Opening tagged PDF documents with form fields and creating
    				interactive PDF form elements with the Run Form Fields Recognition
    				tool. </p></item><item><p> Modifying fillable form fields, or adding form fields, using
    					Adobe Acrobat Pro or Adobe LiveCycle Designer. </p></item></ulist>
    			<p>Using Adobe LiveCycle Designer, you can create forms from scratch. </p>
    		</description>
    		<examples>
    			<eg-group>
    				<head>Adding interactive controls to existing forms in PDF
    				documents using Adobe Acrobat 9 Pro</head>
    				<description>
    					<p>This example is shown with Adobe Acrobat Pro. There are other software
    						tools that perform similar functions. See the list of other software
    						tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<p>If you have a form in a tagged PDF document (created by scanning
    						a paper form or using an authoring tool to generate tagged PDF),
    						you can use Adobe Acrobat Pro to make the form elements keyboard
    						accessible in the same page locations as the static form. </p>
    					<olist><item><p> Use Advanced &gt; Accessibility &gt; Run Form Field Recognition
    						to automatically detect form fields and make them fillable. </p></item></olist>
    					<p>The following image shows the Run Form Field Recognition tool is
    						selected to detect form fields in a document converted to tagged
    						PDF. </p>
    					<p><image><img source="working-examples/PDF23/form1.jpg" height="307" width="548"/><alt>Form fields in a PDF document in Adobe Acrobat Pro. The Advanced &gt; Accessibility menu is selected, showing the Run Form Field Recognition tool.</alt></image>  </p>
    					<p>The following image shows the resulting form fields after the
    						Run Form Recognition tool is run. </p>
    					<p><image><img source="working-examples/PDF23/form1a.jpg" height="488" width="872"/><alt>Form fields in a PDF document in Adobe Acrobat Pro after running the Form Field Recognition tool.</alt></image>  </p>
    					<p>This example is shown in operation in the <loc href="form-fields-keybd.pdf" linktype="examples">working example of Interactive Controls in Acrobat</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding form controls in PDF documents using Adobe Acrobat
    					9 Pro</head>
    				<description>
    					<p>This example is shown with Adobe Acrobat Pro. There are other software
    						tools that perform similar functions. See the list of other software
    						tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<p>You can add keyboard accessible form controls to your form as follows: </p>
    					<olist><item><p> Forms &gt; Add or Edit Fields... This puts the form in Form
    						Editing mode. </p></item><item><p> Open the Add New Field menu on the upper left, and select a
    							form field to add. The image below shows the menu of fields. </p></item></olist>
    					<p><image><img source="working-examples/PDF23/form1c.jpg" height="306" width="268"/><alt>The Add New Field menu with the list of available form fields.</alt></image> </p>
    					<p>The following image shows a checkbox added to the form in Example
    						1. </p>
    					<p><image><img source="working-examples/PDF23/form1b.jpg" height="157" width="459"/><alt>A checkbox added to the form using Add or Edit Fields...</alt></image>  </p>
    					<p>This example is shown in operation in the <loc href="form-fields-keybd-lc.pdf" linktype="examples">working example of Interactive Controls in LiveCycle Designer</loc>.</p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Editing form controls in PDF documents using Adobe
    				Acrobat 9 Pro</head>
    				<description>
    					<p>This example is shown with Adobe Acrobat Pro. There are other software
    						tools that perform similar functions. See the list of other software
    						tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<p>To edit fields, select the context menu for the field and select
    						Properties... The properties menu for that form field lets you modify
    						it, as shown in the following image. </p>
    					<p><image><img source="working-examples/PDF23/form5.jpg" height="503" width="525"/><alt>The Text Field Properties dialog to modify a form field.</alt></image>  </p>
    					<note><p>The tooltip is not keyboard accessible but will be screen-reader
    						accessible: see <specref ref="PDF12"/>. </p></note>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Creating new interactive forms with Adobe LiveCycle
    				Designer ES 8.2.1</head>
    				<description>
    					<p>This example is shown with Adobe LiveCycle Designer. There are
    						other software tools that perform similar functions. See the list
    						of other software tools in <specref ref="pdf_notes_acc-sup_files_applications"/>. </p>
    					<p>You can use Adobe LiveCycle Designer to create new forms. In addition
    						to invoking this standalone tool from the Windows Start menu, you
    						can invoke it in Adobe Acrobat Pro: </p>
    					<olist><item><p> Forms &gt; Start Form Wizard... </p></item><item><p> Select the No Existing Form radio button, as shown in the following
    						image. </p></item></olist>
    					<p><image><img source="working-examples/PDF23/form2.jpg" height="355" width="417"/><alt>The first dialog in the Form Wizard showing the No Existing Form Button selected.</alt></image> </p>
    					<p>Clicking Next invokes LiveCycle Designer and the first page of
    						the New Form Assistant. as shown in the following image. </p>
    					<p><image><img source="working-examples/PDF23/form2a.jpg" height="314" width="1080"/><alt>LiveCycle Designer and the first page of the New Form Assistant.</alt></image> </p>
    					<p>When you invoke LiveCycle Designer from the Windows Start menu,
    						the Form Wizard is available from File &gt; New... </p>
    					<p>The New Form Assistant creates a blank form. Use the Object Library
    						in the right pane to select form controls. </p>
    					<p><image><img source="working-examples/PDF23/lc-blank.jpg" height="560" width="953"/><alt>A newly created blank form in LiveCycle Designer with the Object Library.</alt></image> </p>
    					<p>You can also use LiveCycle Designer to create forms based on commonly
    						used forms templates. </p>
    					<olist><item><p>Invoke the Template Assistant wizard from the New pulldown: <image><img source="working-examples/PDF23/lc-new.jpg" height="32" width="49"/><alt>LiveCycle Designer: New icon to select form templates.</alt></image>. </p></item><item><p>Select Forms and then select an appropriate type of form. Then,
    						you can personalize the form by swapping out placeholder text,
    						graphics, form fields, and properties with custom objects that
    						you provide or define. </p></item></olist>
    					<p><image><img source="working-examples/PDF23/lc-templates.jpg" height="620" width="437"/><alt>LiveCycle Designer: list of form templates.</alt></image> </p>
    				</description>
    			</eg-group>
    			<eg-group>
    				<head>Adding a text field in a PDF document using the /Tx
    				field type</head>
    				<description>
    					<p>The following code fragment illustrates code that is typical for
    						a simple text field such as shown in Examples 1 and 2. This is typically
    						accomplished by an authoring tool. </p>
    					<codeblock><![CDATA[<< /AP -dict-                                                   
   /DA /Helv  0 Tf 0 g
   /DR -dict-
   /F 0x4
   /FT Tx              % FT key set to Tx for Text Field
   /P -dict-
   /Rect -array-
   /StructParent 0x1
   /Subtype Widget
   /T Date you are available   % Partial field name Date
   /TU Date you are available: use mm/dd/yyyy format % TU tool tip value serves as short description
   /Type Annot
   /V Pat Jones
>>
...
<Start Stream>
 BT
  /P <</MCID 0 >>BDC
  /CS0 cs 0  scn 
  /TT0 1 Tf
    -0.001 Tc 0.003 Tw 11.04 0 0 11.04 72 709.56 Tm
    [(P)-6(le)-3(as)10(e)-3( )11(P)-6(rin)2(t)-3( Y)8(o)-7(u)2(r N)4(a)11(m)-6(e)]TJ
  0 Tc 0 Tw 9.533 0 Td
  ( )Tj
  -0.004 Tc 0.004 Tw 0.217 0 Td
  [(\()-5(R)-4(e)5(q)-1(u)-1(i)-3(r)-3(e)-6(d)-1(\))]TJ
 EMC
  /P <</MCID 1 >>BDC
  0 Tc 0 Tw 4.283 0 Td
  [( )-2( )]TJ
   EMC
   /ArtifactSpan <</MCID 2 >>BDC
   0.002 Tc -0.002 Tw 0.456 0 Td
  [(__)11(___)11(___)11(___)11(___)11(_)11(____)11(___)11(___)11(__)]TJ
  0 Tc 0 Tw 13.391 0 Td
  ( )Tj
  EMC
 ET
<End Stream>
]]></codeblock>
    				</description>
    			</eg-group>
    		</examples>
    		<resources>
    			<see-also>
    				<ulist><item><p> Section 12.7 (Interactive Forms) in <loc href="http://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf">PDF
    					1.7 (ISO 32000-1)</loc> </p></item><item><p> <loc href="http://partners.adobe.com/public/developer/xml/index_arch.html">Adobe
    						XML Forms Architecture (XFA)</loc> </p></item></ulist>
    			</see-also>
    		</resources>
    		<related-techniques>
    			<relatedtech idref="G202"/>
    			<relatedtech idref="PDF3"/>
    			<relatedtech idref="PDF12"/>
    			<relatedtech idref="PDF15"/>
    		</related-techniques>
    		<tests>
    			<procedure>
    				<olist><item><p> For each form control, verify that it is properly implemented
    					by tabbing to each form control and checking that it can be activated
    					or that its value can be changed from the keyboard. </p></item></olist>
    			</procedure>
    			<expected-results>
    				<ulist><item><p>#1 is true. </p></item></ulist>
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href="http://trace.wisc.edu/wcag_wiki/index.php?title=Providing_interactive_form_controls_in_PDF_documents"/></source>
    		</admin>
    	</technique>
    	<!--
    		<technique id="PDF">
    		<short-name></short-name>
    		<applicability>
    		<p use-id="pdf.applicability.general"/>
    		</applicability>
    		<applies-to>
    		
    		</applies-to>
    		<ua-issues>
    		<ua-issue use-id="pdf.ua-issue.general"/>
    		</ua-issues>
    		<description>
    		
    		</description>
    		<examples>
    		<eg-group>
    		<head></head>
    		<description>
    		<p>This example is shown in operation in the <loc href="" linktype="examples">working example of @@</loc>.</p>
    		</description>
    		</eg-group>
    		</examples>
    		<tests>
    		<procedure>
    		
    		</procedure>
    		<expected-results>
    		
    		</expected-results>
    		</tests>
    		<admin>
    		<source><loc href=""/></source>
    		</admin>
    		</technique>
    	-->
    </div1>
  </body>
  <back>
    <div1 id="placeholders">
      <!-- note: this can be updated using /misc/id-list.xslt (requires cut and paste)-->
      <head/>
      <p id="UNKNOWN">place holder for idref</p>
        
        <p id="cc1">placeholder for cc1</p>
        <p id="cc2">placeholder for cc2</p>
        <p id="cc3">placeholder for cc3</p>
        <p id="cc4">placeholder for cc4</p>
        <p id="cc5">placeholder for cc5</p>
        
 <p id="text-equiv">placeholder for text-equiv</p>
      <p id="text-equiv-all">placeholder for text-equiv-all</p>

      <p id="media-equiv">placeholder for media-equiv</p>
      <p id="media-equiv-av-only-alt">placeholder for media-equiv-av-only-alt</p>
      <p id="media-equiv-captions">placeholder for media-equiv-captions</p>
      <p id="media-equiv-audio-desc">placeholder for media-equiv-audio-desc</p>
      <p id="media-equiv-real-time-captions">placeholder for media-equiv-real-time-captions</p>
      <p id="media-equiv-audio-desc-only">placeholder for media-equiv-audio-desc-only</p>

      <p id="media-equiv-sign">placeholder for media-equiv-sign</p>
      <p id="media-equiv-extended-ad">placeholder for media-equiv-extended-ad</p>
      <p id="media-equiv-text-doc">placeholder for media-equiv-text-doc</p>
      <p id="media-equiv-live-audio-only">placeholder for media-equiv-live-audio-only</p>
      <p id="content-structure-separation">placeholder for content-structure-separation</p>
      <p id="content-structure-separation-programmatic">placeholder for content-structure-separation-programmatic</p>

      <p id="content-structure-separation-sequence">placeholder for content-structure-separation-sequence</p>
      <p id="content-structure-separation-understanding">placeholder for content-structure-separation-understanding</p>
      <p id="visual-audio-contrast">placeholder for visual-audio-contrast</p>
      <p id="visual-audio-contrast-without-color">placeholder for visual-audio-contrast-without-color</p>
      <p id="visual-audio-contrast-dis-audio">placeholder for visual-audio-contrast-dis-audio</p>
      <p id="visual-audio-contrast-contrast">placeholder for visual-audio-contrast-contrast</p>

      <p id="visual-audio-contrast-scale">placeholder for visual-audio-contrast-scale</p>
      <p id="visual-audio-contrast-text-presentation">placeholder for visual-audio-contrast-text-presentation</p>
      <p id="visual-audio-contrast7">placeholder for visual-audio-contrast7</p>
      <p id="visual-audio-contrast-noaudio">placeholder for visual-audio-contrast-noaudio</p>
      <p id="visual-audio-contrast-visual-presentation">placeholder for visual-audio-contrast-visual-presentation</p>
      <p id="visual-audio-contrast-text-images">placeholder for visual-audio-contrast-text-images</p>

      <p id="keyboard-operation">placeholder for keyboard-operation</p>
      <p id="keyboard-operation-keyboard-operable">placeholder for keyboard-operation-keyboard-operable</p>
      <p id="keyboard-operation-trapping">placeholder for keyboard-operation-trapping</p>
      <p id="keyboard-operation-all-funcs">placeholder for keyboard-operation-all-funcs</p>
      <p id="time-limits">placeholder for time-limits</p>
      <p id="time-limits-required-behaviors">placeholder for time-limits-required-behaviors</p>

      <p id="time-limits-pause">placeholder for time-limits-pause</p>
      <p id="time-limits-no-exceptions">placeholder for time-limits-no-exceptions</p>
      <p id="time-limits-postponed">placeholder for time-limits-postponed</p>
      <p id="time-limits-server-timeout">placeholder for time-limits-server-timeout</p>
      <p id="seizure">placeholder for seizure</p>
      <p id="seizure-does-not-violate">placeholder for seizure-does-not-violate</p>

      <p id="seizure-three-times">placeholder for seizure-three-times</p>
      <p id="navigation-mechanisms">placeholder for navigation-mechanisms</p>
      <p id="navigation-mechanisms-skip">placeholder for navigation-mechanisms-skip</p>
      <p id="navigation-mechanisms-title">placeholder for navigation-mechanisms-title</p>
      <p id="navigation-mechanisms-focus-order">placeholder for navigation-mechanisms-focus-order</p>
      <p id="navigation-mechanisms-refs">placeholder for navigation-mechanisms-refs</p>

      <p id="navigation-mechanisms-mult-loc">placeholder for navigation-mechanisms-mult-loc</p>
      <p id="navigation-mechanisms-descriptive">placeholder for navigation-mechanisms-descriptive</p>
      <p id="navigation-mechanisms-focus-visible">placeholder for navigation-mechanisms-focus-visible</p>
      <p id="navigation-mechanisms-location">placeholder for navigation-mechanisms-location</p>
      <p id="navigation-mechanisms-link">placeholder for navigation-mechanisms-link</p>
      <p id="navigation-mechanisms-headings">placeholder for navigation-mechanisms-headings</p>

      <p id="meaning">placeholder for meaning</p>
      <p id="meaning-doc-lang-id">placeholder for meaning-doc-lang-id</p>
      <p id="meaning-other-lang-id">placeholder for meaning-other-lang-id</p>
      <p id="meaning-idioms">placeholder for meaning-idioms</p>
      <p id="meaning-located">placeholder for meaning-located</p>
      <p id="meaning-supplements">placeholder for meaning-supplements</p>

      <p id="meaning-pronunciation">placeholder for meaning-pronunciation</p>
      <p id="consistent-behavior">placeholder for consistent-behavior</p>
      <p id="consistent-behavior-receive-focus">placeholder for consistent-behavior-receive-focus</p>
      <p id="consistent-behavior-unpredictable-change">placeholder for consistent-behavior-unpredictable-change</p>
      <p id="consistent-behavior-consistent-locations">placeholder for consistent-behavior-consistent-locations</p>
      <p id="consistent-behavior-consistent-functionality">placeholder for consistent-behavior-consistent-functionality</p>

      <p id="consistent-behavior-no-extreme-changes-context">placeholder for consistent-behavior-no-extreme-changes-context</p>
      <p id="minimize-error">placeholder for minimize-error</p>
      <p id="minimize-error-identified">placeholder for minimize-error-identified</p>
      <p id="minimize-error-cues">placeholder for minimize-error-cues</p>
      <p id="minimize-error-suggestions">placeholder for minimize-error-suggestions</p>
      <p id="minimize-error-reversible">placeholder for minimize-error-reversible</p>

      <p id="minimize-error-context-help">placeholder for minimize-error-context-help</p>
      <p id="minimize-error-reversible-all">placeholder for minimize-error-reversible-all</p>
      <p id="ensure-compat">placeholder for ensure-compat</p>
      <p id="ensure-compat-parses">placeholder for ensure-compat-parses</p>
      <p id="ensure-compat-rsv">placeholder for ensure-compat-rsv</p>
      <p id="G1">placeholder for G1</p>

      <p id="G4">placeholder for G4</p>
      <p id="G5">placeholder for G5</p>
      <p id="G8">placeholder for G8</p>
      <p id="G9">placeholder for G9</p>
      <p id="G10">placeholder for G10</p>
      <p id="G11">placeholder for G11</p>

      <p id="G13">placeholder for G13</p>
      <p id="G14">placeholder for G14</p>
      <p id="G15">placeholder for G15</p>
      <p id="G17">placeholder for G17</p>
      <p id="G18">placeholder for G18</p>
      <p id="G19">placeholder for G19</p>

      <p id="G21">placeholder for G21</p>
      <p id="G53">placeholder for G53</p>
      <p id="G54">placeholder for G54</p>
      <p id="G55">placeholder for G55</p>
      <p id="G56">placeholder for G56</p>
      <p id="G57">placeholder for G57</p>

      <p id="G58">placeholder for G58</p>
      <p id="G59">placeholder for G59</p>
      <p id="G60">placeholder for G60</p>
      <p id="G61">placeholder for G61</p>
      <p id="G62">placeholder for G62</p>
      <p id="G63">placeholder for G63</p>

      <p id="G64">placeholder for G64</p>
      <p id="G65">placeholder for G65</p>
      <p id="G68">placeholder for G68</p>
      <p id="G69">placeholder for G69</p>
      <p id="G70">placeholder for G70</p>
      <p id="G71">placeholder for G71</p>

      <p id="G73">placeholder for G73</p>
      <p id="G74">placeholder for G74</p>
      <p id="G75">placeholder for G75</p>
      <p id="G76">placeholder for G76</p>
      <p id="G78">placeholder for G78</p>
      <p id="G79">placeholder for G79</p>

      <p id="G80">placeholder for G80</p>
      <p id="G81">placeholder for G81</p>
      <p id="G82">placeholder for G82</p>
      <p id="G83">placeholder for G83</p>
      <p id="G84">placeholder for G84</p>
      <p id="G85">placeholder for G85</p>

      <p id="G86">placeholder for G86</p>
      <p id="G87">placeholder for G87</p>
      <p id="G88">placeholder for G88</p>
      <p id="G89">placeholder for G89</p>
      <p id="G90">placeholder for G90</p>
      <p id="G91">placeholder for G91</p>

      <p id="G92">placeholder for G92</p>
      <p id="G93">placeholder for G93</p>
      <p id="G94">placeholder for G94</p>
      <p id="G95">placeholder for G95</p>
      <p id="G96">placeholder for G96</p>
      <p id="G97">placeholder for G97</p>

      <p id="G98">placeholder for G98</p>
      <p id="G99">placeholder for G99</p>
      <p id="G100">placeholder for G100</p>
      <p id="G101">placeholder for G101</p>
      <p id="G102">placeholder for G102</p>
      <p id="G103">placeholder for G103</p>

      <p id="G105">placeholder for G105</p>
      <p id="G107">placeholder for G107</p>
      <p id="G108">placeholder for G108</p>
      <p id="G110">placeholder for G110</p>
      <p id="G111">placeholder for G111</p>
      <p id="G112">placeholder for G112</p>

      <p id="G115">placeholder for G115</p>
      <p id="G117">placeholder for G117</p>
      <p id="G120">placeholder for G120</p>
      <p id="G121">placeholder for G121</p>
      <p id="G122">placeholder for G122</p>
      <p id="G123">placeholder for G123</p>

      <p id="G124">placeholder for G124</p>
      <p id="G125">placeholder for G125</p>
      <p id="G126">placeholder for G126</p>
      <p id="G127">placeholder for G127</p>
      <p id="G128">placeholder for G128</p>
      <p id="G130">placeholder for G130</p>

      <p id="G131">placeholder for G131</p>
      <p id="G133">placeholder for G133</p>
      <p id="G134">placeholder for G134</p>
      <p id="G135">placeholder for G135</p>
      <p id="G136">placeholder for G136</p>
      <p id="G138">placeholder for G138</p>

      <p id="G139">placeholder for G139</p>
      <p id="G140">placeholder for G140</p>
      <p id="G141">placeholder for G141</p>
      <p id="G142">placeholder for G142</p>
      <p id="G143">placeholder for G143</p>
      <p id="G144">placeholder for G144</p>

      <p id="G145">placeholder for G145</p>
      <p id="G146">placeholder for G146</p>
      <p id="G147">placeholder for G147</p>
      <p id="G148">placeholder for G148</p>
      <p id="G149">placeholder for G149</p>
      <p id="G150">placeholder for G150</p>

      <p id="G151">placeholder for G151</p>
      <p id="G152">placeholder for G152</p>
      <p id="G153">placeholder for G153</p>
      <p id="G155">placeholder for G155</p>
      <p id="G156">placeholder for G156</p>
      <p id="G157">placeholder for G157</p>

      <p id="G158">placeholder for G158</p>
      <p id="G159">placeholder for G159</p>
      <p id="G160">placeholder for G160</p>
      <p id="G161">placeholder for G161</p>
      <p id="G162">placeholder for G162</p>
      <p id="G163">placeholder for G163</p>

      <p id="G164">placeholder for G164</p>
      <p id="G165">placeholder for G165</p>
      <p id="G166">placeholder for G166</p>
      <p id="G167">placeholder for G167</p>
      <p id="G168">placeholder for G168</p>
      <p id="G169">placeholder for G169</p>

      <p id="G170">placeholder for G170</p>
      <p id="G171">placeholder for G171</p>
      <p id="G172">placeholder for G172</p>
      <p id="G173">placeholder for G173</p>
      <p id="G174">placeholder for G174</p>
      <p id="G175">placeholder for G175</p>

      <p id="G176">placeholder for G176</p>
      <p id="G177">placeholder for G177</p>
      <p id="G178">placeholder for G178</p>
      <p id="G179">placeholder for G179</p>
      <p id="G180">placeholder for G180</p>
      <p id="G181">placeholder for G181</p>

      <p id="G182">placeholder for G182</p>
      <p id="G183">placeholder for G183</p>
      <p id="G184">placeholder for G184</p>
      <p id="G185">placeholder for G185</p>
      <p id="G186">placeholder for G186</p>
      <p id="G187">placeholder for G187</p>

      <p id="G188">placeholder for G188</p>
      <p id="G189">placeholder for G189</p>
      <p id="G190">placeholder for G190</p>
      <p id="G191">placeholder for G191</p>
      <p id="G192">placeholder for G192</p>
      <p id="G193">placeholder for G193</p>

      <p id="G194">placeholder for G194</p>
      <p id="G195">placeholder for G195</p>
      <p id="G196">placeholder for G196</p>
      <p id="G197">placeholder for G197</p>
      <p id="G198">placeholder for G198</p>
      <p id="H2">placeholder for H2</p>

      <p id="H4">placeholder for H4</p>
      <p id="H24">placeholder for H24</p>
      <p id="H25">placeholder for H25</p>
      <p id="H27">placeholder for H27</p>
      <p id="H28">placeholder for H28</p>
      <p id="H30">placeholder for H30</p>

      <p id="H32">placeholder for H32</p>
      <p id="H33">placeholder for H33</p>
      <p id="H34">placeholder for H34</p>
      <p id="H35">placeholder for H35</p>
      <p id="H36">placeholder for H36</p>
      <p id="H37">placeholder for H37</p>

      <p id="H39">placeholder for H39</p>
      <p id="H40">placeholder for H40</p>
      <p id="H42">placeholder for H42</p>
      <p id="H43">placeholder for H43</p>
      <p id="H44">placeholder for H44</p>
      <p id="H45">placeholder for H45</p>

      <p id="H46">placeholder for H46</p>
      <p id="H48">placeholder for H48</p>
      <p id="H49">placeholder for H49</p>
      <p id="H50">placeholder for H50</p>
      <p id="H51">placeholder for H51</p>
      <p id="H53">placeholder for H53</p>

      <p id="H54">placeholder for H54</p>
      <p id="H56">placeholder for H56</p>
      <p id="H57">placeholder for H57</p>
      <p id="H58">placeholder for H58</p>
      <p id="H59">placeholder for H59</p>
      <p id="H60">placeholder for H60</p>

      <p id="H62">placeholder for H62</p>
      <p id="H63">placeholder for H63</p>
      <p id="H64">placeholder for H64</p>
      <p id="H65">placeholder for H65</p>
      <p id="H67">placeholder for H67</p>
      <p id="H69">placeholder for H69</p>

      <p id="H70">placeholder for H70</p>
      <p id="H71">placeholder for H71</p>
      <p id="H73">placeholder for H73</p>
      <p id="H74">placeholder for H74</p>
      <p id="H75">placeholder for H75</p>
      <p id="H76">placeholder for H76</p>

      <p id="H77">placeholder for H77</p>
      <p id="H78">placeholder for H78</p>
      <p id="H79">placeholder for H79</p>
      <p id="H80">placeholder for H80</p>
      <p id="H81">placeholder for H81</p>
      <p id="H82">placeholder for H82</p>

      <p id="H83">placeholder for H83</p>
      <p id="H84">placeholder for H84</p>
      <p id="H85">placeholder for H85</p>
      <p id="H86">placeholder for H86</p>
      <p id="H87">placeholder for H87</p>
      <p id="H88">placeholder for H88</p>

      <p id="H89">placeholder for H89</p>
      <p id="H90">placeholder for H90</p>
      <p id="H91">placeholder for H91</p>

      <p id="SCR1">placeholder for SCR1</p>
      <p id="SCR2">placeholder for SCR2</p>
      <p id="SCR14">placeholder for SCR14</p>
      <p id="SCR16">placeholder for SCR16</p>

      <p id="SCR18">placeholder for SCR18</p>
      <p id="SCR19">placeholder for SCR19</p>
      <p id="SCR20">placeholder for SCR20</p>
      <p id="SCR21">placeholder for SCR21</p>
      <p id="SCR22">placeholder for SCR22</p>
      <p id="SCR24">placeholder for SCR24</p>

      <p id="SCR26">placeholder for SCR26</p>
      <p id="SCR27">placeholder for SCR27</p>
      <p id="SCR28">placeholder for SCR28</p>
      <p id="SCR29">placeholder for SCR29</p>
      <p id="SCR30">placeholder for SCR30</p>
      <p id="SCR31">placeholder for SCR31</p>

      <p id="SCR32">placeholder for SCR32</p>
      <p id="SCR33">placeholder for SCR33</p>
      <p id="SCR34">placeholder for SCR34</p>
      <p id="SCR35">placeholder for SCR35</p>
      <p id="SCR36">placeholder for SCR36</p>
      <p id="SCR37">placeholder for SCR37</p>

      <p id="SVR1">placeholder for SVR1</p>
      <p id="SVR2">placeholder for SVR2</p>
      <p id="SVR3">placeholder for SVR3</p>
      <p id="SVR4">placeholder for SVR4</p>
      <p id="SM1">placeholder for SM1</p>
      <p id="SM2">placeholder for SM2</p>

      <p id="SM6">placeholder for SM6</p>
      <p id="SM7">placeholder for SM7</p>
      <p id="SM11">placeholder for SM11</p>
      <p id="SM12">placeholder for SM12</p>
      <p id="SM13">placeholder for SM13</p>
      <p id="SM14">placeholder for SM14</p>

      <p id="T1">placeholder for T1</p>
      <p id="T2">placeholder for T2</p>
      <p id="T3">placeholder for T3</p>
      <p id="ARIA1">placeholder for ARIA1</p>
      <p id="ARIA2">placeholder for ARIA2</p>
      <p id="ARIA3">placeholder for ARIA3</p>

      <p id="ARIA4">placeholder for ARIA4</p>
      <p id="F1">placeholder for F1</p>
      <p id="F2">placeholder for F2</p>
      <p id="F3">placeholder for F3</p>
      <p id="F4">placeholder for F4</p>
      <p id="F7">placeholder for F7</p>

      <p id="F8">placeholder for F8</p>
      <p id="F9">placeholder for F9</p>
      <p id="F10">placeholder for F10</p>
      <p id="F12">placeholder for F12</p>
      <p id="F13">placeholder for F13</p>
      <p id="F14">placeholder for F14</p>

      <p id="F15">placeholder for F15</p>
      <p id="F16">placeholder for F16</p>
      <p id="F17">placeholder for F17</p>
      <p id="F19">placeholder for F19</p>
      <p id="F20">placeholder for F20</p>
      <p id="F22">placeholder for F22</p>

      <p id="F23">placeholder for F23</p>
      <p id="F24">placeholder for F24</p>
      <p id="F25">placeholder for F25</p>
      <p id="F26">placeholder for F26</p>
      <p id="F30">placeholder for F30</p>
      <p id="F31">placeholder for F31</p>

      <p id="F32">placeholder for F32</p>
      <p id="F33">placeholder for F33</p>
      <p id="F34">placeholder for F34</p>
      <p id="F36">placeholder for F36</p>
      <p id="F37">placeholder for F37</p>
      <p id="F38">placeholder for F38</p>

      <p id="F39">placeholder for F39</p>
      <p id="F40">placeholder for F40</p>
      <p id="F41">placeholder for F41</p>
      <p id="F42">placeholder for F42</p>
      <p id="F43">placeholder for F43</p>
      <p id="F44">placeholder for F44</p>

      <p id="F46">placeholder for F46</p>
      <p id="F47">placeholder for F47</p>
      <p id="F48">placeholder for F48</p>
      <p id="F49">placeholder for F49</p>
      <p id="F50">placeholder for F50</p>
      <p id="F52">placeholder for F52</p>

      <p id="F54">placeholder for F54</p>
      <p id="F55">placeholder for F55</p>
      <p id="F58">placeholder for F58</p>
      <p id="F59">placeholder for F59</p>
      <p id="F60">placeholder for F60</p>
      <p id="F61">placeholder for F61</p>

      <p id="F62">placeholder for F62</p>
      <p id="F63">placeholder for F63</p>
      <p id="F65">placeholder for F65</p>
      <p id="F66">placeholder for F66</p>
      <p id="F67">placeholder for F67</p>
      <p id="F68">placeholder for F68</p>

      <p id="F69">placeholder for F69</p>
      <p id="F70">placeholder for F70</p>
      <p id="F71">placeholder for F71</p>
      <p id="F72">placeholder for F72</p>
      <p id="F73">placeholder for F73</p>
      <p id="F74">placeholder for F74</p>

      <p id="F75">placeholder for F75</p>
      <p id="F76">placeholder for F76</p>
      <p id="F77">placeholder for F77</p>
      <p id="F78">placeholder for F78</p>
      <p id="F79">placeholder for F79</p>
      <p id="F80">placeholder for F80</p>

      <p id="F81">placeholder for F81</p>
      <p id="F82">placeholder for F82</p>
      <p id="F83">placeholder for F83</p>
      <p id="F84">placeholder for F84</p>
      <p id="F85">placeholder for F85</p>
      <p id="F86">placeholder for F86</p>

      <p id="F87">placeholder for F87</p>
      <p id="F88">placeholder for F88</p>
      <p id="F89">placeholder for F89</p>

    </div1>
    <div1 id="references">
      <head>References</head>
      <blist>
        <bibl id="CSS1" key="CSS1">"Cascading Style Sheets, level 1," B. Bos, H. Wium Lie, eds., W3C Recommendation 17 Dec 1996, revised 11 Jan 1999. Available at <loc href="http://www.w3.org/TR/REC-CSS1/">http://www.w3.org/TR/REC-CSS1/</loc>.</bibl>
        <bibl id="CSS2" key="CSS2">"Cascading Style Sheets, level 2," B. Bos, H. Wium Lie, C. Lilley, and I. Jacobs, eds., W3C Recommendation 12 May 1998. Available at <loc href="http://www.w3.org/TR/CSS2/">http://www.w3.org/TR/CSS2/</loc>.</bibl>
        <bibl id="CSS21" key="CSS21">"Cascading Style Sheets, level 2 revision 1,"  B. Bos, T. Çelik,  I. Hickson,   H. Wium Lie, eds., W3C Candidate Recommendation 25 February 2004.  Available at:  <loc href="http://www.w3.org/TR/CSS21/">http://www.w3.org/TR/CSS21/</loc>
        </bibl>
        <bibl id="CSS3" key="CSS3">
          <titleref href="http://www.w3.org/Style/CSS/current-work#table">[CSS 2.1 and CSS 3] Roadmap</titleref>, CSS WG's table of modules and publication dates.</bibl>
      	<bibl id="PDF" key="PDF">"PDF", Adobe Systems. Available at <loc href="http://www.adobe.com/devnet/pdf.html">http://www.adobe.com/devnet/pdf.html</loc>.</bibl>
      	<bibl id="HTML4" key="HTML4">"HTML 4.01 Specification," D. Raggett, A. Le Hors, I. Jacobs, eds.,  W3C Recommendation 24 December 1999. Available at <loc href="http://www.w3.org/TR/html401/">http://www.w3.org/TR/html401/</loc>
        </bibl>
        <bibl id="WCAG20" key="WCAG20">"Web Content Accessibility Guidelines 2.0,"  B. Caldwell, M. Cooper, L. Guarino Reid, and G. Vanderheiden, eds., W3C Working Draft 11 December 2007. This W3C Working Draft is available at <loc href="http://www.w3.org/TR/2007/WD-WCAG20-20071211/">http://www.w3.org/TR/2007/WD-WCAG20-20071211/</loc>.  The latest version of WCAG 2.0 is available at <loc href="http://www.w3.org/TR/WCAG20/">http://www.w3.org/TR/WCAG20/</loc>
        </bibl>
        <bibl id="XHTML1" key="XHTML1">"XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)," S. Pemberton, et al.,  W3C Recommendation 26 January 2000, revised 1 August 2002. Available at:  <loc href="http://www.w3.org/TR/xhtml1/">http://www.w3.org/TR/xhtml1/</loc>.</bibl>
      </blist>
    </div1>
  </back>
</spec>
